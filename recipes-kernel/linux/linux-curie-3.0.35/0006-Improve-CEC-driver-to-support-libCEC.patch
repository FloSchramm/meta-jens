From fe92fc44105aec5b31e68faf924e1f55e3453f2d Mon Sep 17 00:00:00 2001
From: Jens Rehsack <sno@netbsd.org>
Date: Wed, 9 Jul 2014 13:16:09 +0200
Subject: [PATCH 6/7] Improve CEC driver to support libCEC ...

cf http://stephan-rafin.net/blog/2013/09/30/i-mx6-cec/ for details
check https://github.com/wolfgar/utilite/tree/master/drivers/mxc/hdmi-cec
for updates, too
---
 drivers/mxc/hdmi-cec/mxc_hdmi-cec.c | 206 ++++++++++++++++++++++--------------
 1 file changed, 125 insertions(+), 81 deletions(-)

diff --git a/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c b/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c
index 1764623..381fc9f 100644
--- a/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c
+++ b/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c
@@ -1,3 +1,4 @@
+
 /*
  * Copyright (C) 2012-2013 Freescale Semiconductor, Inc. All Rights Reserved.
  */
@@ -54,6 +55,8 @@
 #define MESSAGE_TYPE_CONNECTED		4
 #define MESSAGE_TYPE_SEND_SUCCESS		5
 
+#define CEC_TX_INPROGRESS -1
+#define CEC_TX_AVAIL 0
 
 struct hdmi_cec_priv {
 	int  receive_error;
@@ -62,7 +65,9 @@ struct hdmi_cec_priv {
 	bool cec_state;
 	u8 last_msg[MAX_MESSAGE_LEN];
 	u8 msg_len;
-	u8 latest_cec_stat;
+	int tx_answer;
+	u16 latest_cec_stat;
+	u8 link_status;
 	u32 cec_irq;
 	spinlock_t irq_lock;
 	struct delayed_work hdmi_cec_work;
@@ -85,11 +90,15 @@ static struct hdmi_cec_priv hdmi_cec_data;
 static u8 open_count;
 
 static wait_queue_head_t hdmi_cec_queue;
+static wait_queue_head_t tx_cec_queue;
+
 static irqreturn_t mxc_hdmi_cec_isr(int irq, void *data)
 {
 	struct hdmi_cec_priv *hdmi_cec = data;
-	u8 cec_stat = 0;
+	u16 cec_stat = 0;
 	unsigned long flags;
+	u8 phy_stat0;
+	irqreturn_t ret = IRQ_HANDLED;
 
 	spin_lock_irqsave(&hdmi_cec->irq_lock, flags);
 
@@ -97,20 +106,30 @@ static irqreturn_t mxc_hdmi_cec_isr(int irq, void *data)
 
 	cec_stat = hdmi_readb(HDMI_IH_CEC_STAT0);
 	hdmi_writeb(cec_stat, HDMI_IH_CEC_STAT0);
+	phy_stat0 = hdmi_readb(HDMI_PHY_STAT0) & 0x02;
+
 	if ((cec_stat & (HDMI_IH_CEC_STAT0_ERROR_INIT | \
 		HDMI_IH_CEC_STAT0_NACK | HDMI_IH_CEC_STAT0_EOM | \
 		HDMI_IH_CEC_STAT0_DONE)) == 0) {
-		spin_unlock_irqrestore(&hdmi_cec->irq_lock, flags);
-		return IRQ_HANDLED;
+		ret = IRQ_NONE;
+		cec_stat = 0;
+	}
+	if (hdmi_cec->link_status ^ phy_stat0) {
+		/* HPD value changed */
+		hdmi_cec->link_status = phy_stat0;
+		if (hdmi_cec->link_status)
+			cec_stat |= 0x80; /* Connected */
+		else
+			cec_stat |= 0x100; /* Disconnected */
 	}
 	pr_debug("HDMI CEC interrupt received\n");
-	hdmi_cec->latest_cec_stat = cec_stat;
+	hdmi_cec->latest_cec_stat = cec_stat ;
 
 	schedule_delayed_work(&(hdmi_cec->hdmi_cec_work), msecs_to_jiffies(20));
 
 	spin_unlock_irqrestore(&hdmi_cec->irq_lock, flags);
 
-	return IRQ_HANDLED;
+	return ret;
 }
 
 void mxc_hdmi_cec_handle(u16 cec_stat)
@@ -122,20 +141,11 @@ void mxc_hdmi_cec_handle(u16 cec_stat)
 		return;
 
 	if (cec_stat & HDMI_IH_CEC_STAT0_DONE) {
-		event = vmalloc(sizeof(struct hdmi_cec_event));
-		if (NULL == event) {
-			pr_err("%s:Don't get memory!\n", __func__);
-			return;
-		}
-		memset(event, 0, sizeof(struct hdmi_cec_event));
-		event->event_type = MESSAGE_TYPE_SEND_SUCCESS;
-		mutex_lock(&hdmi_cec_data.lock);
-		list_add_tail(&event->list, &head);
-		mutex_unlock(&hdmi_cec_data.lock);
-		wake_up(&hdmi_cec_queue);
+		hdmi_cec_data.tx_answer = cec_stat;
+		wake_up(&tx_cec_queue);
 	}
 	/*EOM is detected so that the received data is ready in the receiver data buffer*/
-	else if (cec_stat & HDMI_IH_CEC_STAT0_EOM) {
+	if (cec_stat & HDMI_IH_CEC_STAT0_EOM) {
 		hdmi_writeb(0x02, HDMI_IH_CEC_STAT0);
 		event = vmalloc(sizeof(struct hdmi_cec_event));
 		if (NULL == event) {
@@ -158,13 +168,15 @@ void mxc_hdmi_cec_handle(u16 cec_stat)
 		wake_up(&hdmi_cec_queue);
 	}
 	/*An error is detected on cec line (for initiator only). */
-	else if (cec_stat & HDMI_IH_CEC_STAT0_ERROR_INIT) {
+	if (cec_stat & HDMI_IH_CEC_STAT0_ERROR_INIT) {
 		mutex_lock(&hdmi_cec_data.lock);
 		hdmi_cec_data.send_error++;
-		if (hdmi_cec_data.send_error > 5) {
-			pr_err("%s:Re-transmission is attempted more than 5 times!\n", __func__);
+		if (hdmi_cec_data.send_error > 2) {
+			pr_err("%s:Re-transmission is attempted more than 2 times!\n", __func__);
 			hdmi_cec_data.send_error = 0;
 			mutex_unlock(&hdmi_cec_data.lock);
+			hdmi_cec_data.tx_answer = cec_stat;
+			wake_up(&tx_cec_queue);
 			return;
 		}
 		for (i = 0; i < hdmi_cec_data.msg_len; i++)
@@ -177,24 +189,17 @@ void mxc_hdmi_cec_handle(u16 cec_stat)
 	}
 	/*A frame is not acknowledged in a directly addressed message. Or a frame is negatively acknowledged in
 	a broadcast message (for initiator only).*/
-	else if (cec_stat & HDMI_IH_CEC_STAT0_NACK) {
-		event = vmalloc(sizeof(struct hdmi_cec_event));
-		if (NULL == event) {
-			pr_err("%s:Don't get memory!\n", __func__);
-			return;
-		}
-		memset(event, 0, sizeof(struct hdmi_cec_event));
-		event->event_type = MESSAGE_TYPE_NOACK;
-		mutex_lock(&hdmi_cec_data.lock);
-		list_add_tail(&event->list, &head);
-		mutex_unlock(&hdmi_cec_data.lock);
-		wake_up(&hdmi_cec_queue);
+	if (cec_stat & HDMI_IH_CEC_STAT0_NACK) {
+		hdmi_cec_data.tx_answer = cec_stat;
+		wake_up(&tx_cec_queue);
 	}
 	/*An error is notified by a follower. Abnormal logic data bit error (for follower).*/
-	else if (cec_stat & HDMI_IH_CEC_STAT0_ERROR_FOLL)
+	if (cec_stat & HDMI_IH_CEC_STAT0_ERROR_FOLL) {
 		hdmi_cec_data.receive_error++;
+	}
 	/*HDMI cable connected*/
-	else if (cec_stat & 0x80) {
+	if (cec_stat & 0x80) {
+		pr_info("HDMI link connected\n");
 		event = vmalloc(sizeof(struct hdmi_cec_event));
 		if (NULL == event) {
 			pr_err("%s:Don't get memory!\n", __func__);
@@ -208,7 +213,8 @@ void mxc_hdmi_cec_handle(u16 cec_stat)
 		wake_up(&hdmi_cec_queue);
 	}
 	/*HDMI cable disconnected*/
-	else if (cec_stat & 0x100) {
+	if (cec_stat & 0x100) {
+		pr_info("HDMI link disconnected\n");
 		event = vmalloc(sizeof(struct hdmi_cec_event));
 		if (NULL == event) {
 			pr_err("%s:Don't get memory!\n", __func__);
@@ -233,7 +239,7 @@ static void mxc_hdmi_cec_worker(struct work_struct *work)
 }
 
 /*!
- * @brief open function for vpu file operation
+ * @brief open function for cec file operation
  *
  * @return  0 on success or negative error code on error
  */
@@ -251,11 +257,13 @@ static int hdmi_cec_open(struct inode *inode, struct file *filp)
 	mutex_unlock(&hdmi_cec_data.lock);
 	return 0;
 }
+
 static ssize_t hdmi_cec_read(struct file *file, char __user *buf, size_t count,
 			    loff_t *ppos)
 {
 	struct hdmi_cec_event *event = NULL;
 	pr_debug("function : %s\n", __func__);
+
 	if (!open_count)
 		return -ENODEV;
 	mutex_lock(&hdmi_cec_data.lock);
@@ -263,32 +271,42 @@ static ssize_t hdmi_cec_read(struct file *file, char __user *buf, size_t count,
 		mutex_unlock(&hdmi_cec_data.lock);
 		return -EACCES;
 	}
-	mutex_unlock(&hdmi_cec_data.lock);
-	/* delete from list */
-	mutex_lock(&hdmi_cec_data.lock);
+
 	if (list_empty(&head)) {
-		mutex_unlock(&hdmi_cec_data.lock);
-		return -EACCES;
+		if (file->f_flags & O_NONBLOCK) {
+			mutex_unlock(&hdmi_cec_data.lock);
+			return -EAGAIN;
+		} else {
+			do {
+				mutex_unlock(&hdmi_cec_data.lock);
+				if (wait_event_interruptible(hdmi_cec_queue, (!list_empty(&head))))
+					return -ERESTARTSYS;
+				mutex_lock(&hdmi_cec_data.lock);
+			} while (list_empty(&head));
+		}
 	}
+
 	event = list_first_entry(&head, struct hdmi_cec_event, list);
 	list_del(&event->list);
 	mutex_unlock(&hdmi_cec_data.lock);
-	if (copy_to_user(buf,
-					 event,
-					 sizeof(struct hdmi_cec_event) - sizeof(struct list_head))) {
+	if (copy_to_user(buf, event,
+			 sizeof(struct hdmi_cec_event) - sizeof(struct list_head))) {
 		vfree(event);
 		return -EFAULT;
 	}
 	vfree(event);
-	return sizeof(struct hdmi_cec_event);
+	return (sizeof(struct hdmi_cec_event) - sizeof(struct list_head));
 }
+
 static ssize_t hdmi_cec_write(struct file *file, const char __user *buf,
 			     size_t count, loff_t *ppos)
 {
 	int ret = 0 , i = 0;
 	u8 msg[MAX_MESSAGE_LEN];
 	u8 msg_len = 0, val = 0;
+
 	pr_debug("function : %s\n", __func__);
+
 	if (!open_count)
 		return -ENODEV;
 	mutex_lock(&hdmi_cec_data.lock);
@@ -296,17 +314,21 @@ static ssize_t hdmi_cec_write(struct file *file, const char __user *buf,
 		mutex_unlock(&hdmi_cec_data.lock);
 		return -EACCES;
 	}
+	/* Ensure that there is only one writer who is the only listener of tx_cec_queue */
+	if (hdmi_cec_data.tx_answer != CEC_TX_AVAIL) {
+		mutex_unlock(&hdmi_cec_data.lock);
+		return -EBUSY;
+	}
 	mutex_unlock(&hdmi_cec_data.lock);
 	if (count > MAX_MESSAGE_LEN)
 		return -EINVAL;
-	mutex_lock(&hdmi_cec_data.lock);
-	hdmi_cec_data.send_error = 0;
 	memset(&msg, 0, MAX_MESSAGE_LEN);
 	ret = copy_from_user(&msg, buf, count);
-	if (ret) {
-		ret = -EACCES;
-		goto end;
-	}
+	if (ret)
+		return -EACCES;
+	mutex_lock(&hdmi_cec_data.lock);
+	hdmi_cec_data.send_error = 0;
+	hdmi_cec_data.tx_answer = CEC_TX_INPROGRESS;
 	msg_len = count;
 	hdmi_writeb(msg_len, HDMI_CEC_TX_CNT);
 	for (i = 0; i < msg_len; i++)
@@ -316,23 +338,44 @@ static ssize_t hdmi_cec_write(struct file *file, const char __user *buf,
 	hdmi_writeb(val, HDMI_CEC_CTRL);
 	memcpy(hdmi_cec_data.last_msg, msg, msg_len);
 	hdmi_cec_data.msg_len = msg_len;
-	i = 0;
-	val = hdmi_readb(HDMI_CEC_CTRL);
-	while ((val & 0x01) == 0x1) {
-		msleep(50);
-		i++;
-		if (i > 3) {
-			ret = -EIO;
-			goto end;
-		}
-		val = hdmi_readb(HDMI_CEC_CTRL);
-	}
-end:
 	mutex_unlock(&hdmi_cec_data.lock);
+
+	ret = wait_event_interruptible_timeout(tx_cec_queue, hdmi_cec_data.tx_answer != CEC_TX_INPROGRESS, HZ);
+	if (ret < 0) {
+		ret = -ERESTARTSYS;
+		goto tx_out;
+	}
+
+	if (hdmi_cec_data.tx_answer & HDMI_IH_CEC_STAT0_DONE)
+		/* msg correctly sent */
+		ret = msg_len;
+	else
+		ret =  -EIO;
+
+tx_out:
+	hdmi_cec_data.tx_answer = CEC_TX_AVAIL;
 	return ret;
 }
 
 
+static void hdmi_stop_device(void)
+{ 
+	u8 val;
+
+	hdmi_writeb(0x10, HDMI_CEC_CTRL);
+	val = HDMI_IH_CEC_STAT0_WAKEUP | HDMI_IH_CEC_STAT0_ERROR_FOLL | HDMI_IH_CEC_STAT0_ERROR_INIT | HDMI_IH_CEC_STAT0_ARB_LOST | \
+			HDMI_IH_CEC_STAT0_NACK | HDMI_IH_CEC_STAT0_EOM | HDMI_IH_CEC_STAT0_DONE;
+	hdmi_writeb(val, HDMI_CEC_MASK);
+	hdmi_writeb(val, HDMI_IH_MUTE_CEC_STAT0);
+	hdmi_writeb(0x0, HDMI_CEC_POLARITY);
+	val = hdmi_readb(HDMI_MC_CLKDIS);
+	val |= HDMI_MC_CLKDIS_CECCLK_DISABLE;
+	hdmi_writeb(val, HDMI_MC_CLKDIS);
+	mutex_lock(&hdmi_cec_data.lock);
+	hdmi_cec_data.cec_state = false;
+	mutex_unlock(&hdmi_cec_data.lock);
+}
+
 /*!
  * @brief IO ctrl function for vpu file operation
  * @param cmd IO ctrl command
@@ -352,6 +395,7 @@ static long hdmi_cec_ioctl(struct file *filp, u_int cmd,
 		mutex_lock(&hdmi_cec_data.lock);
 		if (false == hdmi_cec_data.cec_state) {
 			mutex_unlock(&hdmi_cec_data.lock);
+			pr_err("Trying to set logical address while not started\n");
 			return -EACCES;
 		}
 		hdmi_cec_data.Logical_address = (u8)arg;
@@ -381,28 +425,20 @@ static long hdmi_cec_ioctl(struct file *filp, u_int cmd,
 		val &= ~HDMI_MC_CLKDIS_CECCLK_DISABLE;
 		hdmi_writeb(val, HDMI_MC_CLKDIS);
 		hdmi_writeb(0x02, HDMI_CEC_CTRL);
+		/* Force read unlock */
+		hdmi_writeb(0x0, HDMI_CEC_LOCK);
 		val = HDMI_IH_CEC_STAT0_ERROR_INIT | HDMI_IH_CEC_STAT0_NACK | HDMI_IH_CEC_STAT0_EOM | HDMI_IH_CEC_STAT0_DONE;
 		hdmi_writeb(val, HDMI_CEC_POLARITY);
 		val = HDMI_IH_CEC_STAT0_WAKEUP | HDMI_IH_CEC_STAT0_ERROR_FOLL | HDMI_IH_CEC_STAT0_ARB_LOST;
 		hdmi_writeb(val, HDMI_CEC_MASK);
 		hdmi_writeb(val, HDMI_IH_MUTE_CEC_STAT0);
+		hdmi_cec_data.link_status = hdmi_readb(HDMI_PHY_STAT0) & 0x02;
 		mutex_lock(&hdmi_cec_data.lock);
 		hdmi_cec_data.cec_state = true;
 		mutex_unlock(&hdmi_cec_data.lock);
 		break;
 	case HDMICEC_IOC_STOPDEVICE:
-		hdmi_writeb(0x10, HDMI_CEC_CTRL);
-		val = HDMI_IH_CEC_STAT0_WAKEUP | HDMI_IH_CEC_STAT0_ERROR_FOLL | HDMI_IH_CEC_STAT0_ERROR_INIT | HDMI_IH_CEC_STAT0_ARB_LOST | \
-				HDMI_IH_CEC_STAT0_NACK | HDMI_IH_CEC_STAT0_EOM | HDMI_IH_CEC_STAT0_DONE;
-		hdmi_writeb(val, HDMI_CEC_MASK);
-		hdmi_writeb(val, HDMI_IH_MUTE_CEC_STAT0);
-		hdmi_writeb(0x0, HDMI_CEC_POLARITY);
-		val = hdmi_readb(HDMI_MC_CLKDIS);
-		val |= HDMI_MC_CLKDIS_CECCLK_DISABLE;
-		hdmi_writeb(val, HDMI_MC_CLKDIS);
-		mutex_lock(&hdmi_cec_data.lock);
-		hdmi_cec_data.cec_state = false;
-		mutex_unlock(&hdmi_cec_data.lock);
+		hdmi_stop_device();
 		break;
 	case HDMICEC_IOC_GETPHYADDRESS:
 		hdmi_get_edid_cfg(&hdmi_edid_cfg);
@@ -442,15 +478,14 @@ static unsigned int hdmi_cec_poll(struct file *file, poll_table *wait)
 
 	pr_debug("function : %s\n", __func__);
 
-	if (!open_count)
-		return -ENODEV;
-	if (false == hdmi_cec_data.cec_state)
-		return -EACCES;
-
 	poll_wait(file, &hdmi_cec_queue, wait);
 
+	mutex_lock(&hdmi_cec_data.lock);
+	if (hdmi_cec_data.tx_answer == CEC_TX_AVAIL)
+		mask =  (POLLOUT | POLLWRNORM);
 	if (!list_empty(&head))
 			mask |= (POLLIN | POLLRDNORM);
+	mutex_unlock(&hdmi_cec_data.lock);
 	return mask;
 }
 
@@ -507,6 +542,7 @@ static int hdmi_cec_dev_probe(struct platform_device *pdev)
 
 	mutex_init(&hdmi_cec_data.lock);
 	hdmi_cec_data.Logical_address = 15;
+	hdmi_cec_data.tx_answer = CEC_TX_AVAIL;
 	platform_set_drvdata(pdev, &hdmi_cec_data);
 	INIT_DELAYED_WORK(&hdmi_cec_data.hdmi_cec_work, mxc_hdmi_cec_worker);
 	printk(KERN_INFO "HDMI CEC initialized\n");
@@ -559,12 +595,20 @@ static int __init hdmi_cec_init(void)
 	int ret = platform_driver_register(&mxc_hdmi_cec_driver);
 
 	init_waitqueue_head(&hdmi_cec_queue);
+	init_waitqueue_head(&tx_cec_queue);
 	INIT_LIST_HEAD(&head);
 	return ret;
 }
 
 static void __exit hdmi_cec_exit(void)
 {
+
+	if (hdmi_cec_data.cec_state)
+		hdmi_stop_device();
+
+	if (hdmi_cec_data.cec_irq > 0)
+		free_irq(hdmi_cec_data.cec_irq, &hdmi_cec_data);
+
 	if (hdmi_cec_major > 0) {
 		device_destroy(hdmi_cec_class, MKDEV(hdmi_cec_major, 0));
 		class_destroy(hdmi_cec_class);
-- 
1.9.1

