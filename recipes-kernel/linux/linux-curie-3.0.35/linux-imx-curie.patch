diff --git a/arch/arm/include/asm/elf.h b/arch/arm/include/asm/elf.h
index 0e9ce8d..4cbac28 100644
--- a/arch/arm/include/asm/elf.h
+++ b/arch/arm/include/asm/elf.h
@@ -50,6 +50,7 @@ typedef struct user_fp elf_fpregset_t;
 #define R_ARM_NONE		0
 #define R_ARM_PC24		1
 #define R_ARM_ABS32		2
+#define R_ARM_REL32		3
 #define R_ARM_CALL		28
 #define R_ARM_JUMP24		29
 #define R_ARM_V4BX		40
diff --git a/arch/arm/kernel/module.c b/arch/arm/kernel/module.c
index 016d6a0..755e841 100644
--- a/arch/arm/kernel/module.c
+++ b/arch/arm/kernel/module.c
@@ -109,6 +109,9 @@ apply_relocate(Elf32_Shdr *sechdrs, const char *strtab, unsigned int symindex,
 		case R_ARM_ABS32:
 			*(u32 *)loc += sym->st_value;
 			break;
+		case R_ARM_REL32:
+			*(u32 *)loc += sym->st_value - loc;
+			break;
 
 		case R_ARM_PC24:
 		case R_ARM_CALL:
diff --git a/arch/arm/mach-mx6/board-mx6dl_sabresd.h b/arch/arm/mach-mx6/board-mx6dl_sabresd.h
index 7cb6924..f8fa930 100644
--- a/arch/arm/mach-mx6/board-mx6dl_sabresd.h
+++ b/arch/arm/mach-mx6/board-mx6dl_sabresd.h
@@ -21,17 +21,13 @@
 #include <mach/iomux-mx6dl.h>
 
 static iomux_v3_cfg_t mx6dl_sabresd_pads[] = {
-	/* AUDMUX */
-	MX6DL_PAD_CSI0_DAT4__AUDMUX_AUD3_TXC,
-	MX6DL_PAD_CSI0_DAT5__AUDMUX_AUD3_TXD,
-	MX6DL_PAD_CSI0_DAT6__AUDMUX_AUD3_TXFS,
-	MX6DL_PAD_CSI0_DAT7__AUDMUX_AUD3_RXD,
-
+#if 0
 	/* CSPI */
 	MX6DL_PAD_KEY_COL0__ECSPI1_SCLK,
 	MX6DL_PAD_KEY_ROW0__ECSPI1_MOSI,
 	MX6DL_PAD_KEY_COL1__ECSPI1_MISO,
 	MX6DL_PAD_KEY_ROW1__GPIO_4_9,
+#endif
 
 	/* ENET */
 	MX6DL_PAD_ENET_MDIO__ENET_MDIO,
@@ -56,70 +52,29 @@ static iomux_v3_cfg_t mx6dl_sabresd_pads[] = {
 	/* RGMII Interrupt */
 	MX6DL_PAD_ENET_RXD1__GPIO_1_26,
 
-	/* I2C1 */
-	MX6DL_PAD_CSI0_DAT8__I2C1_SDA,
-	MX6DL_PAD_CSI0_DAT9__I2C1_SCL,
-
-	/* I2C2 */
-	MX6DL_PAD_KEY_COL3__I2C2_SCL,
-	MX6DL_PAD_KEY_ROW3__I2C2_SDA,
-
-	/* I2C3 */
-	MX6DL_PAD_GPIO_3__I2C3_SCL,
+	/* I2C for HDMI */
+	MX6DL_PAD_EIM_D16__I2C2_SDA,
+	MX6DL_PAD_EIM_EB2__I2C2_SCL,
 
-	/* DISPLAY */
-	MX6DL_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK,
-	MX6DL_PAD_DI0_PIN15__IPU1_DI0_PIN15,		/* DE */
-	MX6DL_PAD_DI0_PIN2__IPU1_DI0_PIN2,		/* HSync */
-	MX6DL_PAD_DI0_PIN3__IPU1_DI0_PIN3,		/* VSync */
-	MX6DL_PAD_DI0_PIN4__IPU1_DI0_PIN4,		/* Contrast */
-	MX6DL_PAD_DISP0_DAT0__IPU1_DISP0_DAT_0,
-	MX6DL_PAD_DISP0_DAT1__IPU1_DISP0_DAT_1,
-	MX6DL_PAD_DISP0_DAT2__IPU1_DISP0_DAT_2,
-	MX6DL_PAD_DISP0_DAT3__IPU1_DISP0_DAT_3,
-	MX6DL_PAD_DISP0_DAT4__IPU1_DISP0_DAT_4,
-	MX6DL_PAD_DISP0_DAT5__IPU1_DISP0_DAT_5,
-	MX6DL_PAD_DISP0_DAT6__IPU1_DISP0_DAT_6,
-	MX6DL_PAD_DISP0_DAT7__IPU1_DISP0_DAT_7,
-	MX6DL_PAD_DISP0_DAT8__IPU1_DISP0_DAT_8,
-	MX6DL_PAD_DISP0_DAT9__IPU1_DISP0_DAT_9,
-	MX6DL_PAD_DISP0_DAT10__IPU1_DISP0_DAT_10,
-	MX6DL_PAD_DISP0_DAT11__IPU1_DISP0_DAT_11,
-	MX6DL_PAD_DISP0_DAT12__IPU1_DISP0_DAT_12,
-	MX6DL_PAD_DISP0_DAT13__IPU1_DISP0_DAT_13,
-	MX6DL_PAD_DISP0_DAT14__IPU1_DISP0_DAT_14,
-	MX6DL_PAD_DISP0_DAT15__IPU1_DISP0_DAT_15,
-	MX6DL_PAD_DISP0_DAT16__IPU1_DISP0_DAT_16,
-	MX6DL_PAD_DISP0_DAT17__IPU1_DISP0_DAT_17,
-	MX6DL_PAD_DISP0_DAT18__IPU1_DISP0_DAT_18,
-	MX6DL_PAD_DISP0_DAT19__IPU1_DISP0_DAT_19,
-	MX6DL_PAD_DISP0_DAT20__IPU1_DISP0_DAT_20,
-	MX6DL_PAD_DISP0_DAT21__IPU1_DISP0_DAT_21,
-	MX6DL_PAD_DISP0_DAT22__IPU1_DISP0_DAT_22,
-	MX6DL_PAD_DISP0_DAT23__IPU1_DISP0_DAT_23,
-
-	/* FlexCAN */
-	MX6DL_PAD_GPIO_7__CAN1_TXCAN,
-	MX6DL_PAD_GPIO_8__CAN1_RXCAN,
-	/* CAN1_STBY */
-	MX6DL_PAD_GPIO_19__GPIO_4_5,
+	/* I2C3 for PMIC */
+	MX6DL_PAD_EIM_D18__I2C3_SDA,
+	MX6DL_PAD_EIM_D17__I2C3_SCL,
 
 	/* UART1 for debug */
 	MX6DL_PAD_CSI0_DAT10__UART1_TXD,
 	MX6DL_PAD_CSI0_DAT11__UART1_RXD,
 
-	/* UART3 for gps */
-	MX6DL_PAD_EIM_D24__UART3_TXD,
-	MX6DL_PAD_EIM_D25__UART3_RXD,
-
 	/* USB */
+	/* USB_OTG_ID */
 	MX6DL_PAD_ENET_RX_ER__ANATOP_USBOTG_ID,
-	MX6DL_PAD_EIM_D21__USBOH3_USBOTG_OC,
+	/* USB_OTG_OC */
+	MX6DL_PAD_KEY_COL4__USBOH3_USBOTG_OC,
 	/* USB_OTG_PWR_EN */
-	MX6DL_PAD_EIM_D22__GPIO_3_22,
-	MX6DL_PAD_EIM_D30__USBOH3_USBH1_OC,
+	MX6DL_PAD_KEY_ROW4__GPIO_4_15,
+	/*USB_H1 OC*/
+	MX6DL_PAD_GPIO_3__USBOH3_USBH1_OC,
 	/*USB_H1 PWR EN*/
-	MX6DL_PAD_ENET_TXD1__GPIO_1_29,
+	MX6DL_PAD_GPIO_0__GPIO_1_0,
 
 	/* USDHC2 */
 	MX6DL_PAD_SD2_CLK__USDHC2_CLK,
@@ -128,14 +83,18 @@ static iomux_v3_cfg_t mx6dl_sabresd_pads[] = {
 	MX6DL_PAD_SD2_DAT1__USDHC2_DAT1,
 	MX6DL_PAD_SD2_DAT2__USDHC2_DAT2,
 	MX6DL_PAD_SD2_DAT3__USDHC2_DAT3,
+	// USDHC2 is connected to WiFi Adapter, so DAT4~7 is unused
+	MX6DL_PAD_NANDF_D4__GPIO_2_4,
+	/*
 	MX6DL_PAD_NANDF_D4__USDHC2_DAT4,
 	MX6DL_PAD_NANDF_D5__USDHC2_DAT5,
 	MX6DL_PAD_NANDF_D6__USDHC2_DAT6,
 	MX6DL_PAD_NANDF_D7__USDHC2_DAT7,
+	*/
 	/* SD2_CD */
-	MX6DL_PAD_NANDF_D2__GPIO_2_2,
+	//MX6DL_PAD_NANDF_D2__GPIO_2_2,
 	/* SD2_WP */
-	MX6DL_PAD_NANDF_D3__GPIO_2_3,
+	//MX6DL_PAD_NANDF_D3__GPIO_2_3,
 
 	/* USDHC3 */
 	MX6DL_PAD_SD3_CLK__USDHC3_CLK_50MHZ,
@@ -149,9 +108,9 @@ static iomux_v3_cfg_t mx6dl_sabresd_pads[] = {
 	MX6DL_PAD_SD3_DAT6__USDHC3_DAT6_50MHZ,
 	MX6DL_PAD_SD3_DAT7__USDHC3_DAT7_50MHZ,
 	/* SD3_CD */
-	MX6DL_PAD_NANDF_D0__GPIO_2_0,
+	MX6DL_PAD_NANDF_ALE__GPIO_6_8,
 	/* SD3_WP */
-	MX6DL_PAD_NANDF_D1__GPIO_2_1,
+	MX6DL_PAD_NANDF_CS2__GPIO_6_15,
 
 	/* USDHC4 */
 	MX6DL_PAD_SD4_CLK__USDHC4_CLK_50MHZ,
@@ -166,227 +125,18 @@ static iomux_v3_cfg_t mx6dl_sabresd_pads[] = {
 	MX6DL_PAD_SD4_DAT7__USDHC4_DAT7_50MHZ,
 
 	/* HDMI_CEC_IN*/
-	MX6DL_PAD_KEY_ROW2__HDMI_TX_CEC_LINE,
-
-	/* CCM - Audio, Camera clock  */
-	MX6DL_PAD_GPIO_0__CCM_CLKO,
-	/* MICROPHONE_DET */
-	MX6DL_PAD_GPIO_9__GPIO_1_9,
-	/* CODEC_PWR_EN */
-	MX6DL_PAD_KEY_COL2__GPIO_4_10,
-	/* HEADPHONE_DET */
-	MX6DL_PAD_SD3_RST__GPIO_7_8,
-
-	/* GPS_RESET_B */
-	MX6DL_PAD_EIM_EB0__GPIO_2_28,
-	/* GPS_PWREN */
-	MX6DL_PAD_EIM_DA0__GPIO_3_0,
-	/* GPS AUX_3V15_EN*/
-	MX6DL_PAD_NANDF_WP_B__GPIO_6_9,
-	/* GPS_PPS */
-	MX6DL_PAD_EIM_D18__GPIO_3_18,
-
-	/* DISP0_RST_B */
-	MX6DL_PAD_EIM_DA8__GPIO_3_8,
-	/* DI0_D0_CS */
-	MX6DL_PAD_EIM_WAIT__GPIO_5_0,
-	/* DI1_D0_CS */
-	MX6DL_PAD_EIM_BCLK__GPIO_6_31,
-	/* DISP_PWM */
-	MX6DL_PAD_SD1_DAT3__PWM1_PWMO,
-	/* DISP0 power enable */
-	MX6DL_PAD_ENET_TXD0__GPIO_1_30,
-	/* DISP0_RD */
-	MX6DL_PAD_EIM_D28__GPIO_3_28,
-	/* DISP_RST_B */
-	MX6DL_PAD_NANDF_CS0__GPIO_6_11,
-	/* DISP_PWR_EN */
-	MX6DL_PAD_NANDF_CS1__GPIO_6_14,
-	/* CABC_EN0 */
-	MX6DL_PAD_NANDF_CS2__GPIO_6_15,
-	/* CABC_EN1 */
-	MX6DL_PAD_NANDF_CS3__GPIO_6_16,
-	/* DISP0_WR */
-	MX6DL_PAD_NANDF_WP_B__GPIO_6_9,
-
-	/* ALS INT */
-	MX6DL_PAD_EIM_DA9__GPIO_3_9,
-	/* BARO_INT */
-	MX6DL_PAD_EIM_DA15__GPIO_3_15,
-
-	/* SW4 , SW5 & SW1 */
-	/* Volume Up */
-	MX6DL_PAD_GPIO_4__GPIO_1_4,
-	/* Volume Down */
-	MX6DL_PAD_GPIO_5__GPIO_1_5,
-	/* power off */
-	MX6DL_PAD_EIM_D29__GPIO_3_29,
-
-	/* CAP_TCH_INT1 */
-	MX6DL_PAD_NANDF_CLE__GPIO_6_7,
-
-	/* CAP_TCH_INT0 */
-	MX6DL_PAD_NANDF_ALE__GPIO_6_8,
-
-	/* AUX_5V Enable */
-	MX6DL_PAD_NANDF_RB0__GPIO_6_10,
-
-	/* PCIE_RST_B */
-	MX6DL_PAD_GPIO_17__GPIO_7_12,
-	/* PCIE_PWR_EN */
-	MX6DL_PAD_EIM_D19__GPIO_3_19,
-	/* PCIE_WAKE_B */
-	MX6DL_PAD_CSI0_DATA_EN__GPIO_5_20,
-	/* PCIE_DIS_B */
-	MX6DL_PAD_KEY_COL4__GPIO_4_14,
+	//MX6DL_PAD_EIM_A25__GPIO_4_11,
 
 	/* PMIC_INT_B */
 	MX6DL_PAD_GPIO_18__GPIO_7_13,
 
-	/* Charge */
-	MX6DL_PAD_EIM_A25__GPIO_5_2,  /* FLT_1_B */
-	MX6DL_PAD_EIM_D23__GPIO_3_23, /* CHG_1_B */
-	MX6DL_PAD_EIM_DA13__GPIO_3_13, /* CHG_2_B  */
-	MX6DL_PAD_EIM_DA14__GPIO_3_14, /* FLT_2_B */
-
-	MX6DL_PAD_ENET_RXD0__GPIO_1_27, /* UOK_B */
-	MX6DL_PAD_EIM_CS1__GPIO_2_24,   /* DOK_B */
-
-	/* TS_INT - MAX11801 */
-	MX6DL_PAD_EIM_D26__GPIO_3_26,
-	/* eCompass int */
-	MX6DL_PAD_EIM_D16__GPIO_3_16,
-
-	/* SENSOR_PWR_EN */
-	MX6DL_PAD_EIM_EB3__GPIO_2_31,
-	/* ACCL_INT_INT */
-	MX6DL_PAD_SD1_CMD__GPIO_1_18,
-
-	/*WDOG_B to reset pmic*/
-	MX6DL_PAD_GPIO_1__WDOG2_WDOG_B,
-	/* USR_DEF_RED_LED */
+	/* USR_DEF_LED */
+	MX6DL_PAD_GPIO_17__GPIO_7_12,
+	MX6DL_PAD_GPIO_1__GPIO_1_1,
 	MX6DL_PAD_GPIO_2__GPIO_1_2,
-};
-
-static iomux_v3_cfg_t mx6dl_sabresd_csi0_sensor_pads[] = {
-	/* IPU1 Camera */
-	MX6DL_PAD_CSI0_DAT12__IPU1_CSI0_D_12,
-	MX6DL_PAD_CSI0_DAT13__IPU1_CSI0_D_13,
-	MX6DL_PAD_CSI0_DAT14__IPU1_CSI0_D_14,
-	MX6DL_PAD_CSI0_DAT15__IPU1_CSI0_D_15,
-	MX6DL_PAD_CSI0_DAT16__IPU1_CSI0_D_16,
-	MX6DL_PAD_CSI0_DAT17__IPU1_CSI0_D_17,
-	MX6DL_PAD_CSI0_DAT18__IPU1_CSI0_D_18,
-	MX6DL_PAD_CSI0_DAT19__IPU1_CSI0_D_19,
-	MX6DL_PAD_CSI0_DATA_EN__IPU1_CSI0_DATA_EN,
-	MX6DL_PAD_CSI0_MCLK__IPU1_CSI0_HSYNC,
-	MX6DL_PAD_CSI0_PIXCLK__IPU1_CSI0_PIXCLK,
-	MX6DL_PAD_CSI0_VSYNC__IPU1_CSI0_VSYNC,
-
-	MX6DL_PAD_GPIO_0__CCM_CLKO,		/* camera clk */
-
-	MX6DL_PAD_SD1_DAT0__GPIO_1_16,		/* camera PWDN */
-	MX6DL_PAD_SD1_DAT1__GPIO_1_17,		/* camera RESET */
-};
-
-static iomux_v3_cfg_t mx6dl_sabresd_mipi_sensor_pads[] = {
-	MX6DL_PAD_GPIO_0__CCM_CLKO,		/* camera clk */
-
-	MX6DL_PAD_SD1_DAT2__GPIO_1_19,		/* camera PWDN */
-	MX6DL_PAD_SD1_CLK__GPIO_1_20,		/* camera RESET */
-};
-
-static iomux_v3_cfg_t mx6dl_sabresd_epdc_enable_pads[] = {
-	/* EPDC */
-	MX6DL_PAD_EIM_A16__EPDC_SDDO_0,
-	MX6DL_PAD_EIM_DA10__EPDC_SDDO_1,
-	MX6DL_PAD_EIM_DA12__EPDC_SDDO_2,
-	MX6DL_PAD_EIM_DA11__EPDC_SDDO_3,
-	MX6DL_PAD_EIM_LBA__EPDC_SDDO_4,
-	MX6DL_PAD_EIM_EB2__EPDC_SDDO_5,
-	MX6DL_PAD_EIM_CS0__EPDC_SDDO_6,
-	MX6DL_PAD_EIM_RW__EPDC_SDDO_7,
-	MX6DL_PAD_EIM_A21__EPDC_GDCLK,
-	MX6DL_PAD_EIM_A22__EPDC_GDSP,
-	MX6DL_PAD_EIM_A23__EPDC_GDOE,
-	MX6DL_PAD_EIM_A24__EPDC_GDRL,
-	MX6DL_PAD_EIM_D31__EPDC_SDCLK,
-	MX6DL_PAD_EIM_D27__EPDC_SDOE,
-	MX6DL_PAD_EIM_DA1__EPDC_SDLE,
-	MX6DL_PAD_EIM_EB1__EPDC_SDSHR,
-	MX6DL_PAD_EIM_DA2__EPDC_BDR_0,
-	MX6DL_PAD_EIM_DA4__EPDC_SDCE_0,
-	MX6DL_PAD_EIM_DA5__EPDC_SDCE_1,
-	MX6DL_PAD_EIM_DA6__EPDC_SDCE_2,
-
-	/* EPD PMIC (Maxim 17135) pins */
-	MX6DL_PAD_EIM_A17__GPIO_2_21, /* EPDC_PWRSTAT */
-	MX6DL_PAD_EIM_D17__GPIO_3_17, /* EPDC_VCOM0 */
-	MX6DL_PAD_EIM_A18__GPIO_2_20, /* EPDC_PWRCTRL0 */
-	MX6DL_PAD_EIM_D20__GPIO_3_20, /* EPDC_PMIC_WAKEUP */
-	/*
-	 * Depopulate R121, R123, R133, R138, R139,
-	 * R167, R168, and R627 when using E-BOOK
-	 * Card in 16-bit Data Mode. Meanwhile, comments
-	 * the conflict PIN configurations in above tables
-	 */
-	/*
-	MX6DL_PAD_EIM_CS1__EPDC_SDDO_8,
-	MX6DL_PAD_EIM_DA15__EPDC_SDDO_9,
-	MX6DL_PAD_EIM_D16__EPDC_SDDO_10,
-	MX6DL_PAD_EIM_D23__EPDC_SDDO_11
-	MX6DL_PAD_EIM_D19__EPDC_SDDO_12,
-	MX6DL_PAD_EIM_DA13__EPDC_SDDO_13,
-	MX6DL_PAD_EIM_DA14__EPDC_SDDO_14,
-	MX6DL_PAD_EIM_A25__EPDC_SDDO_15,
-	 */
-};
-
-static iomux_v3_cfg_t mx6dl_sabresd_epdc_disable_pads[] = {
-	/* EPDC */
-	MX6DL_PAD_EIM_A16__GPIO_2_22,
-	MX6DL_PAD_EIM_DA10__GPIO_3_10,
-	MX6DL_PAD_EIM_DA12__GPIO_3_12,
-	MX6DL_PAD_EIM_DA11__GPIO_3_11,
-	MX6DL_PAD_EIM_LBA__GPIO_2_27,
-	MX6DL_PAD_EIM_EB2__GPIO_2_30,
-	MX6DL_PAD_EIM_CS0__GPIO_2_23,
-	MX6DL_PAD_EIM_RW__GPIO_2_26,
-	MX6DL_PAD_EIM_A21__GPIO_2_17,
-	MX6DL_PAD_EIM_A22__GPIO_2_16,
-	MX6DL_PAD_EIM_A23__GPIO_6_6,
-	MX6DL_PAD_EIM_A24__GPIO_5_4,
-	MX6DL_PAD_EIM_D31__GPIO_3_31,
-	MX6DL_PAD_EIM_D27__GPIO_3_27,
-	MX6DL_PAD_EIM_DA1__GPIO_3_1,
-	MX6DL_PAD_EIM_EB1__GPIO_2_29,
-	MX6DL_PAD_EIM_DA2__GPIO_3_2,
-	MX6DL_PAD_EIM_DA4__GPIO_3_4,
-	MX6DL_PAD_EIM_DA5__GPIO_3_5,
-	MX6DL_PAD_EIM_DA6__GPIO_3_6,
-
-	/*
-	 * Depopulate R121, R123, R133, R138, R139,
-	 * R167, R168, and R627 when using E-BOOK
-	 * Card in 16-bit Data Mode. Meanwhile, comments
-	 * the conflict PIN configurations in above tables
-	 */
-	/*
-	MX6DL_PAD_EIM_CS1__EPDC_SDDO_8,
-	MX6DL_PAD_EIM_DA15__EPDC_SDDO_9,
-	MX6DL_PAD_EIM_D16__EPDC_SDDO_10,
-	MX6DL_PAD_EIM_D23__EPDC_SDDO_11
-	MX6DL_PAD_EIM_D19__EPDC_SDDO_12,
-	MX6DL_PAD_EIM_DA13__EPDC_SDDO_13,
-	MX6DL_PAD_EIM_DA14__EPDC_SDDO_14,
-	MX6DL_PAD_EIM_A25__EPDC_SDDO_15,
-	 */
-};
-
-static iomux_v3_cfg_t mx6dl_arm2_elan_pads[] = {
-	MX6DL_PAD_EIM_A20__GPIO_2_18,
-	MX6DL_PAD_EIM_DA8__GPIO_3_8,
-	MX6DL_PAD_EIM_D28__GPIO_3_28,
+	MX6DL_PAD_GPIO_9__GPIO_1_9,
+	/* WiFi LED */
+	MX6DL_PAD_GPIO_6__GPIO_1_6,
 };
 
 static iomux_v3_cfg_t mx6dl_sabresd_hdmi_ddc_pads[] = {
@@ -398,4 +148,9 @@ static iomux_v3_cfg_t mx6dl_sabresd_i2c2_pads[] = {
 	MX6DL_PAD_KEY_COL3__I2C2_SCL,	/* I2C2 SCL */
 	MX6DL_PAD_KEY_ROW3__I2C2_SDA,	/* I2C2 SDA */
 };
+
+static iomux_v3_cfg_t mx6dl_sabresd_spdif_pads[] = {
+	MX6DL_PAD_ENET_RXD0__SPDIF_OUT1, /* SPDIF OUT */
+};
+
 #endif
diff --git a/arch/arm/mach-mx6/board-mx6q_sabresd.c b/arch/arm/mach-mx6/board-mx6q_sabresd.c
index 6418025..47dc986 100644
--- a/arch/arm/mach-mx6/board-mx6q_sabresd.c
+++ b/arch/arm/mach-mx6/board-mx6q_sabresd.c
@@ -51,10 +51,6 @@
 #include <linux/regulator/consumer.h>
 #include <linux/regulator/machine.h>
 #include <linux/regulator/fixed.h>
-#include <linux/mfd/max17135.h>
-#include <linux/mfd/wm8994/pdata.h>
-#include <linux/mfd/wm8994/gpio.h>
-#include <sound/wm8962.h>
 #include <linux/mfd/mxc-hdmi-core.h>
 
 #include <mach/common.h>
@@ -83,120 +79,37 @@
 #include "board-mx6q_sabresd.h"
 #include "board-mx6dl_sabresd.h"
 
-#define SABRESD_USR_DEF_GRN_LED	IMX_GPIO_NR(1, 1)
-#define SABRESD_USR_DEF_RED_LED	IMX_GPIO_NR(1, 2)
-#define SABRESD_VOLUME_UP	IMX_GPIO_NR(1, 4)
-#define SABRESD_VOLUME_DN	IMX_GPIO_NR(1, 5)
-#define SABRESD_MICROPHONE_DET	IMX_GPIO_NR(1, 9)
-#define SABRESD_CSI0_PWN	IMX_GPIO_NR(1, 16)
-#define SABRESD_CSI0_RST	IMX_GPIO_NR(1, 17)
-#define SABRESD_ACCL_INT	IMX_GPIO_NR(1, 18)
-#define SABRESD_MIPICSI_PWN	IMX_GPIO_NR(1, 19)
-#define SABRESD_MIPICSI_RST	IMX_GPIO_NR(1, 20)
+// Curie RGMII
 #define SABRESD_RGMII_RST	IMX_GPIO_NR(1, 25)
 #define SABRESD_RGMII_INT	IMX_GPIO_NR(1, 26)
-#define SABRESD_CHARGE_UOK_B	IMX_GPIO_NR(1, 27)
-#define SABRESD_USBH1_PWR_EN	IMX_GPIO_NR(1, 29)
-#define SABRESD_DISP0_PWR_EN	IMX_GPIO_NR(1, 30)
-
-#define SABRESD_SD3_CD		IMX_GPIO_NR(2, 0)
-#define SABRESD_SD3_WP		IMX_GPIO_NR(2, 1)
-#define SABRESD_SD2_CD		IMX_GPIO_NR(2, 2)
-#define SABRESD_SD2_WP		IMX_GPIO_NR(2, 3)
-#define SABRESD_CHARGE_DOK_B	IMX_GPIO_NR(2, 24)
-#define SABRESD_GPS_RESET	IMX_GPIO_NR(2, 28)
-#define SABRESD_SENSOR_EN	IMX_GPIO_NR(2, 31)
-
-#define SABRESD_GPS_EN	IMX_GPIO_NR(3, 0)
-#define SABRESD_DISP0_RST_B	IMX_GPIO_NR(3, 8)
-#define SABRESD_ALS_INT		IMX_GPIO_NR(3, 9)
-#define SABRESD_CHARGE_CHG_2_B	IMX_GPIO_NR(3, 13)
-#define SABRESD_CHARGE_FLT_2_B	IMX_GPIO_NR(3, 14)
-#define SABRESD_BAR0_INT	IMX_GPIO_NR(3, 15)
-#define SABRESD_eCOMPASS_INT	IMX_GPIO_NR(3, 16)
-#define SABRESD_GPS_PPS		IMX_GPIO_NR(3, 18)
-#define SABRESD_PCIE_PWR_EN	IMX_GPIO_NR(3, 19)
-#define SABRESD_USB_OTG_PWR	IMX_GPIO_NR(3, 22)
-#define SABRESD_USB_H1_PWR	IMX_GPIO_NR(1, 29)
-#define SABRESD_CHARGE_CHG_1_B	IMX_GPIO_NR(3, 23)
-#define SABRESD_TS_INT		IMX_GPIO_NR(3, 26)
-#define SABRESD_DISP0_RD	IMX_GPIO_NR(3, 28)
-#define SABRESD_POWER_OFF	IMX_GPIO_NR(3, 29)
-
-#define SABRESD_CAN1_STBY	IMX_GPIO_NR(4, 5)
-#define SABRESD_ECSPI1_CS0  IMX_GPIO_NR(4, 9)
-#define SABRESD_CODEC_PWR_EN	IMX_GPIO_NR(4, 10)
+
+// Curie USB
+#define SABRESD_USB_OTG_PWR	IMX_GPIO_NR(4, 15)
+#define SABRESD_USB_H1_PWR	IMX_GPIO_NR(1, 0)
+
+// Curie SD3
+#define SABRESD_SD3_CD		IMX_GPIO_NR(6, 8)
+#define SABRESD_SD3_WP		IMX_GPIO_NR(6, 15)
+
+// HDMI CEC_IN, unpresent
 #define SABRESD_HDMI_CEC_IN	IMX_GPIO_NR(4, 11)
-#define SABRESD_PCIE_DIS_B	IMX_GPIO_NR(4, 14)
-
-#define SABRESD_DI0_D0_CS	IMX_GPIO_NR(5, 0)
-#define SABRESD_CHARGE_FLT_1_B	IMX_GPIO_NR(5, 2)
-#define SABRESD_PCIE_WAKE_B	IMX_GPIO_NR(5, 20)
-
-#define SABRESD_CAP_TCH_INT1	IMX_GPIO_NR(6, 7)
-#define SABRESD_CAP_TCH_INT0	IMX_GPIO_NR(6, 8)
-#define SABRESD_DISP_RST_B	IMX_GPIO_NR(6, 11)
-#define SABRESD_DISP_PWR_EN	IMX_GPIO_NR(6, 14)
-#define SABRESD_CABC_EN0	IMX_GPIO_NR(6, 15)
-#define SABRESD_CABC_EN1	IMX_GPIO_NR(6, 16)
-#define SABRESD_AUX_3V15_EN	IMX_GPIO_NR(6, 9)
-#define SABRESD_DISP0_WR_REVB	IMX_GPIO_NR(6, 9)
-#define SABRESD_AUX_5V_EN	IMX_GPIO_NR(6, 10)
-#define SABRESD_DI1_D0_CS	IMX_GPIO_NR(6, 31)
-
-#define SABRESD_HEADPHONE_DET	IMX_GPIO_NR(7, 8)
-#define SABRESD_PCIE_RST_B_REVB	IMX_GPIO_NR(7, 12)
+
+// PMIC
 #define SABRESD_PMIC_INT_B	IMX_GPIO_NR(7, 13)
 #define SABRESD_PFUZE_INT	IMX_GPIO_NR(7, 13)
 
-#define SABRESD_EPDC_SDDO_0	IMX_GPIO_NR(2, 22)
-#define SABRESD_EPDC_SDDO_1	IMX_GPIO_NR(3, 10)
-#define SABRESD_EPDC_SDDO_2	IMX_GPIO_NR(3, 12)
-#define SABRESD_EPDC_SDDO_3	IMX_GPIO_NR(3, 11)
-#define SABRESD_EPDC_SDDO_4	IMX_GPIO_NR(2, 27)
-#define SABRESD_EPDC_SDDO_5	IMX_GPIO_NR(2, 30)
-#define SABRESD_EPDC_SDDO_6	IMX_GPIO_NR(2, 23)
-#define SABRESD_EPDC_SDDO_7	IMX_GPIO_NR(2, 26)
-#define SABRESD_EPDC_SDDO_8	IMX_GPIO_NR(2, 24)
-#define SABRESD_EPDC_SDDO_9	IMX_GPIO_NR(3, 15)
-#define SABRESD_EPDC_SDDO_10	IMX_GPIO_NR(3, 16)
-#define SABRESD_EPDC_SDDO_11	IMX_GPIO_NR(3, 23)
-#define SABRESD_EPDC_SDDO_12	IMX_GPIO_NR(3, 19)
-#define SABRESD_EPDC_SDDO_13	IMX_GPIO_NR(3, 13)
-#define SABRESD_EPDC_SDDO_14	IMX_GPIO_NR(3, 14)
-#define SABRESD_EPDC_SDDO_15	IMX_GPIO_NR(5, 2)
-#define SABRESD_EPDC_GDCLK	IMX_GPIO_NR(2, 17)
-#define SABRESD_EPDC_GDSP	IMX_GPIO_NR(2, 16)
-#define SABRESD_EPDC_GDOE	IMX_GPIO_NR(6, 6)
-#define SABRESD_EPDC_GDRL	IMX_GPIO_NR(5, 4)
-#define SABRESD_EPDC_SDCLK	IMX_GPIO_NR(3, 31)
-#define SABRESD_EPDC_SDOEZ	IMX_GPIO_NR(3, 30)
-#define SABRESD_EPDC_SDOED	IMX_GPIO_NR(3, 26)
-#define SABRESD_EPDC_SDOE	IMX_GPIO_NR(3, 27)
-#define SABRESD_EPDC_SDLE	IMX_GPIO_NR(3, 1)
-#define SABRESD_EPDC_SDCLKN	IMX_GPIO_NR(3, 0)
-#define SABRESD_EPDC_SDSHR	IMX_GPIO_NR(2, 29)
-#define SABRESD_EPDC_PWRCOM	IMX_GPIO_NR(2, 28)
-#define SABRESD_EPDC_PWRSTAT	IMX_GPIO_NR(2, 21)
-#define SABRESD_EPDC_PWRCTRL0	IMX_GPIO_NR(2, 20)
-#define SABRESD_EPDC_PWRCTRL1	IMX_GPIO_NR(2, 19)
-#define SABRESD_EPDC_PWRCTRL2	IMX_GPIO_NR(2, 18)
-#define SABRESD_EPDC_PWRCTRL3	IMX_GPIO_NR(3, 28)
-#define SABRESD_EPDC_BDR0	IMX_GPIO_NR(3, 2)
-#define SABRESD_EPDC_BDR1	IMX_GPIO_NR(3, 3)
-#define SABRESD_EPDC_SDCE0	IMX_GPIO_NR(3, 4)
-#define SABRESD_EPDC_SDCE1	IMX_GPIO_NR(3, 5)
-#define SABRESD_EPDC_SDCE2	IMX_GPIO_NR(3, 6)
-#define SABRESD_EPDC_SDCE3	IMX_GPIO_NR(3, 7)
-#define SABRESD_EPDC_SDCE4	IMX_GPIO_NR(3, 8)
-#define SABRESD_EPDC_PMIC_WAKE	IMX_GPIO_NR(3, 20)
-#define SABRESD_EPDC_PMIC_INT	IMX_GPIO_NR(2, 25)
-#define SABRESD_EPDC_VCOM	IMX_GPIO_NR(3, 17)
-#define SABRESD_CHARGE_NOW	IMX_GPIO_NR(1, 2)
-#define SABRESD_CHARGE_DONE	IMX_GPIO_NR(1, 1)
-#define SABRESD_ELAN_CE		IMX_GPIO_NR(2, 18)
-#define SABRESD_ELAN_RST	IMX_GPIO_NR(3, 8)
-#define SABRESD_ELAN_INT	IMX_GPIO_NR(3, 28)
+// Curie LEDs
+#define SABRESD_LED_BOOT    IMX_GPIO_NR(7, 12)
+#define SABRESD_LED_ERROR   IMX_GPIO_NR(1, 1)
+#define SABRESD_LED_USER1   IMX_GPIO_NR(1, 2)
+#define SABRESD_LED_USER2   IMX_GPIO_NR(1, 9)
+#define SABRESD_LED_WIFI    IMX_GPIO_NR(1, 6)
+
+// Curie Keys
+#define SABRESD_KEY_USER    IMX_GPIO_NR(3, 5)
+
+// Curie Wifi CS
+#define SABRESD_WIFI_CS     IMX_GPIO_NR(2, 4)
 
 #define MX6_ENET_IRQ		IMX_GPIO_NR(1, 6)
 #define IOMUX_OBSRV_MUX1_OFFSET	0x3c
@@ -205,9 +118,6 @@
 
 static struct clk *sata_clk;
 static struct clk *clko;
-static int mma8451_position = 1;
-static int mag3110_position = 2;
-static int max11801_mode = 1;
 static int caam_enabled;
 
 extern char *gp_reg_id;
@@ -216,15 +126,12 @@ extern char *pu_reg_id;
 extern int epdc_enabled;
 extern bool enet_to_gpio_6;
 
-static int max17135_regulator_init(struct max17135 *max17135);
-
 static const struct esdhc_platform_data mx6q_sabresd_sd2_data __initconst = {
-	.cd_gpio = SABRESD_SD2_CD,
-	.wp_gpio = SABRESD_SD2_WP,
+	.always_present = 1,
 	.keep_power_at_suspend = 1,
 	.support_8bit = 1,
 	.delay_line = 0,
-	.cd_type = ESDHC_CD_CONTROLLER,
+	.cd_type = ESDHC_CD_PERMANENT,
 };
 
 static const struct esdhc_platform_data mx6q_sabresd_sd3_data __initconst = {
@@ -255,10 +162,46 @@ static inline void mx6q_sabresd_init_uart(void)
 	imx6q_add_imx_uart(0, NULL);
 }
 
+static int spdif_clk_set_rate(struct clk *clk, unsigned long rate)
+{
+	unsigned long rate_actual;
+	rate_actual = clk_round_rate(clk, rate);
+	clk_set_rate(clk, rate_actual);
+	return 0;
+}
+
+static struct mxc_spdif_platform_data mxc_spdif_data = {
+	.spdif_tx		= 1,		/* enable tx */
+	.spdif_rx		= 0,		/* enable rx */
+	/*
+	 * spdif0_clk will be 454.7MHz divided by ccm dividers.
+	 *
+	 * 44.1KHz: 454.7MHz / 7 (ccm) / 23 (spdif) = 44,128 Hz ~ 0.06% error
+	 * 48KHz:   454.7MHz / 4 (ccm) / 37 (spdif) = 48,004 Hz ~ 0.01% error
+	 * 32KHz:   454.7MHz / 6 (ccm) / 37 (spdif) = 32,003 Hz ~ 0.01% error
+	 */
+	.spdif_clk_44100	= 1,    /* tx clk from spdif0_clk_root */
+	.spdif_clk_48000	= 1,    /* tx clk from spdif0_clk_root */
+	.spdif_div_44100	= 23,
+	.spdif_div_48000	= 37,
+	.spdif_div_32000	= 37,
+	.spdif_rx_clk		= 0,    /* rx clk from spdif stream */
+	.spdif_clk_set_rate	= spdif_clk_set_rate,
+	.spdif_clk		= NULL, /* spdif bus clk */
+};
+
 static int mx6q_sabresd_fec_phy_init(struct phy_device *phydev)
 {
 	unsigned short val;
 
+	// Curie: RTL8211E
+	//  disable Green Ethernet
+	phy_write(phydev, 31, 0x0003);
+	phy_write(phydev, 25, 0x3246);
+	phy_write(phydev, 16, 0xa87c);
+	phy_write(phydev, 31, 0x0000);
+	return 0;
+
 	/* Ar8031 phy SmartEEE feature cause link status generates glitch,
 	 * which cause ethernet link down/up issue, so disable SmartEEE
 	 */
@@ -300,490 +243,6 @@ static struct fec_platform_data fec_data __initdata = {
 	.gpio_irq = MX6_ENET_IRQ,
 };
 
-static int mx6q_sabresd_spi_cs[] = {
-	SABRESD_ECSPI1_CS0,
-};
-
-static const struct spi_imx_master mx6q_sabresd_spi_data __initconst = {
-	.chipselect     = mx6q_sabresd_spi_cs,
-	.num_chipselect = ARRAY_SIZE(mx6q_sabresd_spi_cs),
-};
-
-#if defined(CONFIG_MTD_M25P80) || defined(CONFIG_MTD_M25P80_MODULE)
-static struct mtd_partition imx6_sabresd_spi_nor_partitions[] = {
-	{
-	 .name = "bootloader",
-	 .offset = 0,
-	 .size = 0x00100000,
-	},
-	{
-	 .name = "kernel",
-	 .offset = MTDPART_OFS_APPEND,
-	 .size = MTDPART_SIZ_FULL,
-	},
-};
-
-static struct flash_platform_data imx6_sabresd__spi_flash_data = {
-	.name = "m25p80",
-	.parts = imx6_sabresd_spi_nor_partitions,
-	.nr_parts = ARRAY_SIZE(imx6_sabresd_spi_nor_partitions),
-	.type = "sst25vf016b",
-};
-#endif
-
-static struct spi_board_info imx6_sabresd_spi_nor_device[] __initdata = {
-#if defined(CONFIG_MTD_M25P80)
-	{
-		.modalias = "m25p80",
-		.max_speed_hz = 20000000, /* max spi clock (SCK) speed in HZ */
-		.bus_num = 0,
-		.chip_select = 0,
-		.platform_data = &imx6_sabresd__spi_flash_data,
-	},
-#endif
-};
-
-static void spi_device_init(void)
-{
-	spi_register_board_info(imx6_sabresd_spi_nor_device,
-				ARRAY_SIZE(imx6_sabresd_spi_nor_device));
-}
-
-static struct imx_ssi_platform_data mx6_sabresd_ssi_pdata = {
-	.flags = IMX_SSI_DMA | IMX_SSI_SYN,
-};
-
-static struct platform_device mx6_sabresd_audio_wm8958_device = {
-	.name = "imx-wm8958",
-};
-
-static struct mxc_audio_platform_data wm8958_data = {
-	.ssi_num = 1,
-	.src_port = 2,
-	.ext_port = 3,
-	.hp_gpio = SABRESD_HEADPHONE_DET,
-	.hp_active_low = 1,
-};
-
-static struct wm8994_pdata wm8958_config_data = {
-	.gpio_defaults = {
-		[0] = WM8994_GP_FN_GPIO | WM8994_GPN_DB,
-		[1] = WM8994_GP_FN_GPIO | WM8994_GPN_DB | WM8994_GPN_PD,
-		[2] = WM8994_GP_FN_GPIO | WM8994_GPN_DB | WM8994_GPN_PD,
-		[3] = WM8994_GP_FN_GPIO | WM8994_GPN_DB | WM8994_GPN_PD,
-		[4] = WM8994_GP_FN_GPIO | WM8994_GPN_DB | WM8994_GPN_PD,
-		[5] = WM8994_GP_FN_GPIO | WM8994_GPN_DB | WM8994_GPN_PD,
-		[7] = WM8994_GP_FN_GPIO | WM8994_GPN_DB | WM8994_GPN_PD,
-		[8] = WM8994_GP_FN_GPIO | WM8994_GPN_DB | WM8994_GPN_PD,
-		[9] = WM8994_GP_FN_GPIO | WM8994_GPN_DB | WM8994_GPN_PD,
-		[10] = WM8994_GP_FN_GPIO | WM8994_GPN_DB | WM8994_GPN_PD,
-	},
-};
-
-static int mxc_wm8958_init(void)
-{
-	struct clk *clko;
-	int rate;
-
-	clko = clk_get(NULL, "clko_clk");
-	if (IS_ERR(clko)) {
-		pr_err("can't get CLKO clock.\n");
-		return PTR_ERR(clko);
-	}
-	/* both audio codec and comera use CLKO clk*/
-	rate = clk_round_rate(clko, 24000000);
-
-	wm8958_data.sysclk = rate;
-	clk_set_rate(clko, rate);
-
-	/* enable wm8958 4.2v power supply */
-	gpio_request(SABRESD_CODEC_PWR_EN, "aud_4v2");
-	gpio_direction_output(SABRESD_CODEC_PWR_EN, 1);
-	msleep(1);
-	gpio_set_value(SABRESD_CODEC_PWR_EN, 1);
-
-	return 0;
-}
-
-static struct platform_device mx6_sabresd_audio_wm8962_device = {
-	.name = "imx-wm8962",
-};
-
-static struct mxc_audio_platform_data wm8962_data;
-
-static int wm8962_clk_enable(int enable)
-{
-	if (enable)
-		clk_enable(clko);
-	else
-		clk_disable(clko);
-
-	return 0;
-}
-
-static int mxc_wm8962_init(void)
-{
-	int rate;
-
-	clko = clk_get(NULL, "clko_clk");
-	if (IS_ERR(clko)) {
-		pr_err("can't get CLKO clock.\n");
-		return PTR_ERR(clko);
-	}
-	/* both audio codec and comera use CLKO clk*/
-	rate = clk_round_rate(clko, 24000000);
-	clk_set_rate(clko, rate);
-
-	wm8962_data.sysclk = rate;
-
-	return 0;
-}
-
-static struct wm8962_pdata wm8962_config_data = {
-	.gpio_init = {
-		[2] = WM8962_GPIO_FN_DMICCLK,
-		[4] = 0x8000 | WM8962_GPIO_FN_DMICDAT,
-	},
-};
-
-static struct mxc_audio_platform_data wm8962_data = {
-	.ssi_num = 1,
-	.src_port = 2,
-	.ext_port = 3,
-	.hp_gpio = SABRESD_HEADPHONE_DET,
-	.hp_active_low = 1,
-	.mic_gpio = SABRESD_MICROPHONE_DET,
-	.mic_active_low = 1,
-	.init = mxc_wm8962_init,
-	.clock_enable = wm8962_clk_enable,
-};
-
-static struct regulator_consumer_supply sabresd_vwm8962_consumers[] = {
-	REGULATOR_SUPPLY("SPKVDD1", "0-001a"),
-	REGULATOR_SUPPLY("SPKVDD2", "0-001a"),
-};
-
-static struct regulator_init_data sabresd_vwm8962_init = {
-	.constraints = {
-		.name = "SPKVDD",
-		.valid_ops_mask =  REGULATOR_CHANGE_STATUS,
-		.boot_on = 1,
-	},
-	.num_consumer_supplies = ARRAY_SIZE(sabresd_vwm8962_consumers),
-	.consumer_supplies = sabresd_vwm8962_consumers,
-};
-
-static struct fixed_voltage_config sabresd_vwm8962_reg_config = {
-	.supply_name	= "SPKVDD",
-	.microvolts		= 4200000,
-	.gpio			= SABRESD_CODEC_PWR_EN,
-	.enable_high	= 1,
-	.enabled_at_boot = 1,
-	.init_data		= &sabresd_vwm8962_init,
-};
-
-static struct platform_device sabresd_vwm8962_reg_devices = {
-	.name	= "reg-fixed-voltage",
-	.id		= 4,
-	.dev	= {
-		.platform_data = &sabresd_vwm8962_reg_config,
-	},
-};
-
-static void mx6q_csi0_cam_powerdown(int powerdown)
-{
-	if (powerdown)
-		gpio_set_value(SABRESD_CSI0_PWN, 1);
-	else
-		gpio_set_value(SABRESD_CSI0_PWN, 0);
-
-	msleep(2);
-}
-
-static void mx6q_csi0_io_init(void)
-{
-	if (cpu_is_mx6q())
-		mxc_iomux_v3_setup_multiple_pads(mx6q_sabresd_csi0_sensor_pads,
-			ARRAY_SIZE(mx6q_sabresd_csi0_sensor_pads));
-	else if (cpu_is_mx6dl())
-		mxc_iomux_v3_setup_multiple_pads(mx6dl_sabresd_csi0_sensor_pads,
-			ARRAY_SIZE(mx6dl_sabresd_csi0_sensor_pads));
-
-	/* Camera reset */
-	gpio_request(SABRESD_CSI0_RST, "cam-reset");
-	gpio_direction_output(SABRESD_CSI0_RST, 1);
-
-	/* Camera power down */
-	gpio_request(SABRESD_CSI0_PWN, "cam-pwdn");
-	gpio_direction_output(SABRESD_CSI0_PWN, 1);
-	msleep(5);
-	gpio_set_value(SABRESD_CSI0_PWN, 0);
-	msleep(5);
-	gpio_set_value(SABRESD_CSI0_RST, 0);
-	msleep(1);
-	gpio_set_value(SABRESD_CSI0_RST, 1);
-	msleep(5);
-	gpio_set_value(SABRESD_CSI0_PWN, 1);
-
-	/* For MX6Q:
-	 * GPR1 bit19 and bit20 meaning:
-	 * Bit19:       0 - Enable mipi to IPU1 CSI0
-	 *                      virtual channel is fixed to 0
-	 *              1 - Enable parallel interface to IPU1 CSI0
-	 * Bit20:       0 - Enable mipi to IPU2 CSI1
-	 *                      virtual channel is fixed to 3
-	 *              1 - Enable parallel interface to IPU2 CSI1
-	 * IPU1 CSI1 directly connect to mipi csi2,
-	 *      virtual channel is fixed to 1
-	 * IPU2 CSI0 directly connect to mipi csi2,
-	 *      virtual channel is fixed to 2
-	 *
-	 * For MX6DL:
-	 * GPR13 bit 0-2 IPU_CSI0_MUX
-	 *   000 MIPI_CSI0
-	 *   100 IPU CSI0
-	 */
-	if (cpu_is_mx6q())
-		mxc_iomux_set_gpr_register(1, 19, 1, 1);
-	else if (cpu_is_mx6dl())
-		mxc_iomux_set_gpr_register(13, 0, 3, 4);
-}
-
-static struct fsl_mxc_camera_platform_data camera_data = {
-	.mclk = 24000000,
-	.mclk_source = 0,
-	.csi = 0,
-	.io_init = mx6q_csi0_io_init,
-	.pwdn = mx6q_csi0_cam_powerdown,
-};
-
-static void mx6q_mipi_powerdown(int powerdown)
-{
-	if (powerdown)
-		gpio_set_value(SABRESD_MIPICSI_PWN, 1);
-	else
-		gpio_set_value(SABRESD_MIPICSI_PWN, 0);
-
-	msleep(2);
-}
-
-static void mx6q_mipi_sensor_io_init(void)
-{
-	if (cpu_is_mx6q())
-		mxc_iomux_v3_setup_multiple_pads(mx6q_sabresd_mipi_sensor_pads,
-			ARRAY_SIZE(mx6q_sabresd_mipi_sensor_pads));
-	else if (cpu_is_mx6dl())
-		mxc_iomux_v3_setup_multiple_pads(mx6dl_sabresd_mipi_sensor_pads,
-			ARRAY_SIZE(mx6dl_sabresd_mipi_sensor_pads));
-
-	/* Camera reset */
-	gpio_request(SABRESD_MIPICSI_RST, "cam-reset");
-	gpio_direction_output(SABRESD_MIPICSI_RST, 1);
-
-	/* Camera power down */
-	gpio_request(SABRESD_MIPICSI_PWN, "cam-pwdn");
-	gpio_direction_output(SABRESD_MIPICSI_PWN, 1);
-	msleep(5);
-	gpio_set_value(SABRESD_MIPICSI_PWN, 0);
-	msleep(5);
-	gpio_set_value(SABRESD_MIPICSI_RST, 0);
-	msleep(1);
-	gpio_set_value(SABRESD_MIPICSI_RST, 1);
-	msleep(5);
-	gpio_set_value(SABRESD_MIPICSI_PWN, 1);
-
-	/*for mx6dl, mipi virtual channel 1 connect to csi 1*/
-	if (cpu_is_mx6dl())
-		mxc_iomux_set_gpr_register(13, 3, 3, 1);
-}
-
-static struct fsl_mxc_camera_platform_data mipi_csi2_data = {
-	.mclk = 24000000,
-	.mclk_source = 0,
-	.csi = 1,
-	.io_init = mx6q_mipi_sensor_io_init,
-	.pwdn = mx6q_mipi_powerdown,
-};
-
-#define mV_to_uV(mV) (mV * 1000)
-#define uV_to_mV(uV) (uV / 1000)
-#define V_to_uV(V) (mV_to_uV(V * 1000))
-#define uV_to_V(uV) (uV_to_mV(uV) / 1000)
-
-static struct regulator_consumer_supply display_consumers[] = {
-	{
-		/* MAX17135 */
-		.supply = "DISPLAY",
-	},
-};
-
-static struct regulator_consumer_supply vcom_consumers[] = {
-	{
-		/* MAX17135 */
-		.supply = "VCOM",
-	},
-};
-
-static struct regulator_consumer_supply v3p3_consumers[] = {
-	{
-		/* MAX17135 */
-		.supply = "V3P3",
-	},
-};
-
-static struct regulator_init_data max17135_init_data[] = {
-	{
-		.constraints = {
-			.name = "DISPLAY",
-			.valid_ops_mask =  REGULATOR_CHANGE_STATUS,
-		},
-		.num_consumer_supplies = ARRAY_SIZE(display_consumers),
-		.consumer_supplies = display_consumers,
-	}, {
-		.constraints = {
-			.name = "GVDD",
-			.min_uV = V_to_uV(20),
-			.max_uV = V_to_uV(20),
-		},
-	}, {
-		.constraints = {
-			.name = "GVEE",
-			.min_uV = V_to_uV(-22),
-			.max_uV = V_to_uV(-22),
-		},
-	}, {
-		.constraints = {
-			.name = "HVINN",
-			.min_uV = V_to_uV(-22),
-			.max_uV = V_to_uV(-22),
-		},
-	}, {
-		.constraints = {
-			.name = "HVINP",
-			.min_uV = V_to_uV(20),
-			.max_uV = V_to_uV(20),
-		},
-	}, {
-		.constraints = {
-			.name = "VCOM",
-			.min_uV = mV_to_uV(-4325),
-			.max_uV = mV_to_uV(-500),
-			.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
-			REGULATOR_CHANGE_STATUS,
-		},
-		.num_consumer_supplies = ARRAY_SIZE(vcom_consumers),
-		.consumer_supplies = vcom_consumers,
-	}, {
-		.constraints = {
-			.name = "VNEG",
-			.min_uV = V_to_uV(-15),
-			.max_uV = V_to_uV(-15),
-		},
-	}, {
-		.constraints = {
-			.name = "VPOS",
-			.min_uV = V_to_uV(15),
-			.max_uV = V_to_uV(15),
-		},
-	}, {
-		.constraints = {
-			.name = "V3P3",
-			.valid_ops_mask =  REGULATOR_CHANGE_STATUS,
-		},
-		.num_consumer_supplies = ARRAY_SIZE(v3p3_consumers),
-		.consumer_supplies = v3p3_consumers,
-	},
-};
-
-static struct platform_device max17135_sensor_device = {
-	.name = "max17135_sensor",
-	.id = 0,
-};
-
-static struct max17135_platform_data max17135_pdata __initdata = {
-	.vneg_pwrup = 1,
-	.gvee_pwrup = 1,
-	.vpos_pwrup = 2,
-	.gvdd_pwrup = 1,
-	.gvdd_pwrdn = 1,
-	.vpos_pwrdn = 2,
-	.gvee_pwrdn = 1,
-	.vneg_pwrdn = 1,
-	.gpio_pmic_pwrgood = SABRESD_EPDC_PWRSTAT,
-	.gpio_pmic_vcom_ctrl = SABRESD_EPDC_VCOM,
-	.gpio_pmic_wakeup = SABRESD_EPDC_PMIC_WAKE,
-	.gpio_pmic_v3p3 = SABRESD_EPDC_PWRCTRL0,
-	.gpio_pmic_intr = SABRESD_EPDC_PMIC_INT,
-	.regulator_init = max17135_init_data,
-	.init = max17135_regulator_init,
-};
-
-static int __init max17135_regulator_init(struct max17135 *max17135)
-{
-	struct max17135_platform_data *pdata = &max17135_pdata;
-	int i, ret;
-
-	if (!epdc_enabled) {
-		printk(KERN_DEBUG
-			"max17135_regulator_init abort: EPDC not enabled\n");
-		return 0;
-	}
-
-	max17135->gvee_pwrup = pdata->gvee_pwrup;
-	max17135->vneg_pwrup = pdata->vneg_pwrup;
-	max17135->vpos_pwrup = pdata->vpos_pwrup;
-	max17135->gvdd_pwrup = pdata->gvdd_pwrup;
-	max17135->gvdd_pwrdn = pdata->gvdd_pwrdn;
-	max17135->vpos_pwrdn = pdata->vpos_pwrdn;
-	max17135->vneg_pwrdn = pdata->vneg_pwrdn;
-	max17135->gvee_pwrdn = pdata->gvee_pwrdn;
-
-	max17135->max_wait = pdata->vpos_pwrup + pdata->vneg_pwrup +
-		pdata->gvdd_pwrup + pdata->gvee_pwrup;
-
-	max17135->gpio_pmic_pwrgood = pdata->gpio_pmic_pwrgood;
-	max17135->gpio_pmic_vcom_ctrl = pdata->gpio_pmic_vcom_ctrl;
-	max17135->gpio_pmic_wakeup = pdata->gpio_pmic_wakeup;
-	max17135->gpio_pmic_v3p3 = pdata->gpio_pmic_v3p3;
-	max17135->gpio_pmic_intr = pdata->gpio_pmic_intr;
-
-	gpio_request(max17135->gpio_pmic_wakeup, "epdc-pmic-wake");
-	gpio_direction_output(max17135->gpio_pmic_wakeup, 0);
-
-	gpio_request(max17135->gpio_pmic_vcom_ctrl, "epdc-vcom");
-	gpio_direction_output(max17135->gpio_pmic_vcom_ctrl, 0);
-
-	gpio_request(max17135->gpio_pmic_v3p3, "epdc-v3p3");
-	gpio_direction_output(max17135->gpio_pmic_v3p3, 0);
-
-	gpio_request(max17135->gpio_pmic_intr, "epdc-pmic-int");
-	gpio_direction_input(max17135->gpio_pmic_intr);
-
-	gpio_request(max17135->gpio_pmic_pwrgood, "epdc-pwrstat");
-	gpio_direction_input(max17135->gpio_pmic_pwrgood);
-
-	max17135->vcom_setup = false;
-	max17135->init_done = false;
-
-	for (i = 0; i < MAX17135_NUM_REGULATORS; i++) {
-		ret = max17135_register_regulator(max17135, i,
-			&pdata->regulator_init[i]);
-		if (ret != 0) {
-			printk(KERN_ERR"max17135 regulator init failed: %d\n",
-				ret);
-			return ret;
-		}
-	}
-
-	/*
-	 * TODO: We cannot enable full constraints for now, since
-	 * it results in the PFUZE regulators being disabled
-	 * at the end of boot, which disables critical regulators.
-	 */
-	/*regulator_has_full_constraints();*/
-
-	return 0;
-}
 
 static struct imxi2c_platform_data mx6q_sabresd_i2c_data = {
 	.bitrate = 100000,
@@ -793,308 +252,15 @@ static struct fsl_mxc_lightsensor_platform_data ls_data = {
 	.rext = 499,	/* calibration: 499K->700K */
 };
 
-static struct i2c_board_info mxc_i2c0_board_info[] __initdata = {
-	{
-		I2C_BOARD_INFO("wm89**", 0x1a),
-	},
-	{
-		I2C_BOARD_INFO("ov564x", 0x3c),
-		.platform_data = (void *)&camera_data,
-	},
-	{
-		I2C_BOARD_INFO("mma8451", 0x1c),
-		.platform_data = (void *)&mma8451_position,
-	},
-};
-
 static struct i2c_board_info mxc_i2c1_board_info[] __initdata = {
 	{
 		I2C_BOARD_INFO("mxc_hdmi_i2c", 0x50),
 	},
-	{
-		I2C_BOARD_INFO("ov5640_mipi", 0x3c),
-		.platform_data = (void *)&mipi_csi2_data,
-	},
-	{
-		I2C_BOARD_INFO("egalax_ts", 0x4),
-		.irq = gpio_to_irq(SABRESD_CAP_TCH_INT0),
-	},
-	{
-		I2C_BOARD_INFO("max11801", 0x48),
-		.platform_data = (void *)&max11801_mode,
-		.irq = gpio_to_irq(SABRESD_TS_INT),
-	},
-};
-
-static struct i2c_board_info mxc_i2c2_board_info[] __initdata = {
-	{
-		I2C_BOARD_INFO("max17135", 0x48),
-		.platform_data = &max17135_pdata,
-	},
-	{
-		I2C_BOARD_INFO("egalax_ts", 0x4),
-		.irq = gpio_to_irq(SABRESD_CAP_TCH_INT1),
-	},
-	{
-		I2C_BOARD_INFO("mag3110", 0x0e),
-		.irq = gpio_to_irq(SABRESD_eCOMPASS_INT),
-		.platform_data = (void *)&mag3110_position,
-	},
-	{
-		I2C_BOARD_INFO("isl29023", 0x44),
-		.irq  = gpio_to_irq(SABRESD_ALS_INT),
-		.platform_data = &ls_data,
-	}, {
-		I2C_BOARD_INFO("elan-touch", 0x10),
-		.irq = gpio_to_irq(SABRESD_ELAN_INT),
-	},
-};
-
-static int epdc_get_pins(void)
-{
-	int ret = 0;
-
-	/* Claim GPIOs for EPDC pins - used during power up/down */
-	ret |= gpio_request(SABRESD_EPDC_SDDO_0, "epdc_d0");
-	ret |= gpio_request(SABRESD_EPDC_SDDO_1, "epdc_d1");
-	ret |= gpio_request(SABRESD_EPDC_SDDO_2, "epdc_d2");
-	ret |= gpio_request(SABRESD_EPDC_SDDO_3, "epdc_d3");
-	ret |= gpio_request(SABRESD_EPDC_SDDO_4, "epdc_d4");
-	ret |= gpio_request(SABRESD_EPDC_SDDO_5, "epdc_d5");
-	ret |= gpio_request(SABRESD_EPDC_SDDO_6, "epdc_d6");
-	ret |= gpio_request(SABRESD_EPDC_SDDO_7, "epdc_d7");
-	ret |= gpio_request(SABRESD_EPDC_GDCLK, "epdc_gdclk");
-	ret |= gpio_request(SABRESD_EPDC_GDSP, "epdc_gdsp");
-	ret |= gpio_request(SABRESD_EPDC_GDOE, "epdc_gdoe");
-	ret |= gpio_request(SABRESD_EPDC_GDRL, "epdc_gdrl");
-	ret |= gpio_request(SABRESD_EPDC_SDCLK, "epdc_sdclk");
-	ret |= gpio_request(SABRESD_EPDC_SDOE, "epdc_sdoe");
-	ret |= gpio_request(SABRESD_EPDC_SDLE, "epdc_sdle");
-	ret |= gpio_request(SABRESD_EPDC_SDSHR, "epdc_sdshr");
-	ret |= gpio_request(SABRESD_EPDC_BDR0, "epdc_bdr0");
-	ret |= gpio_request(SABRESD_EPDC_SDCE0, "epdc_sdce0");
-	ret |= gpio_request(SABRESD_EPDC_SDCE1, "epdc_sdce1");
-	ret |= gpio_request(SABRESD_EPDC_SDCE2, "epdc_sdce2");
-
-	return ret;
-}
-
-static void epdc_put_pins(void)
-{
-	gpio_free(SABRESD_EPDC_SDDO_0);
-	gpio_free(SABRESD_EPDC_SDDO_1);
-	gpio_free(SABRESD_EPDC_SDDO_2);
-	gpio_free(SABRESD_EPDC_SDDO_3);
-	gpio_free(SABRESD_EPDC_SDDO_4);
-	gpio_free(SABRESD_EPDC_SDDO_5);
-	gpio_free(SABRESD_EPDC_SDDO_6);
-	gpio_free(SABRESD_EPDC_SDDO_7);
-	gpio_free(SABRESD_EPDC_GDCLK);
-	gpio_free(SABRESD_EPDC_GDSP);
-	gpio_free(SABRESD_EPDC_GDOE);
-	gpio_free(SABRESD_EPDC_GDRL);
-	gpio_free(SABRESD_EPDC_SDCLK);
-	gpio_free(SABRESD_EPDC_SDOE);
-	gpio_free(SABRESD_EPDC_SDLE);
-	gpio_free(SABRESD_EPDC_SDSHR);
-	gpio_free(SABRESD_EPDC_BDR0);
-	gpio_free(SABRESD_EPDC_SDCE0);
-	gpio_free(SABRESD_EPDC_SDCE1);
-	gpio_free(SABRESD_EPDC_SDCE2);
-}
-
-static void epdc_enable_pins(void)
-{
-	/* Configure MUX settings to enable EPDC use */
-	mxc_iomux_v3_setup_multiple_pads(mx6dl_sabresd_epdc_enable_pads, \
-				ARRAY_SIZE(mx6dl_sabresd_epdc_enable_pads));
-
-	gpio_direction_input(SABRESD_EPDC_SDDO_0);
-	gpio_direction_input(SABRESD_EPDC_SDDO_1);
-	gpio_direction_input(SABRESD_EPDC_SDDO_2);
-	gpio_direction_input(SABRESD_EPDC_SDDO_3);
-	gpio_direction_input(SABRESD_EPDC_SDDO_4);
-	gpio_direction_input(SABRESD_EPDC_SDDO_5);
-	gpio_direction_input(SABRESD_EPDC_SDDO_6);
-	gpio_direction_input(SABRESD_EPDC_SDDO_7);
-	gpio_direction_input(SABRESD_EPDC_GDCLK);
-	gpio_direction_input(SABRESD_EPDC_GDSP);
-	gpio_direction_input(SABRESD_EPDC_GDOE);
-	gpio_direction_input(SABRESD_EPDC_GDRL);
-	gpio_direction_input(SABRESD_EPDC_SDCLK);
-	gpio_direction_input(SABRESD_EPDC_SDOE);
-	gpio_direction_input(SABRESD_EPDC_SDLE);
-	gpio_direction_input(SABRESD_EPDC_SDSHR);
-	gpio_direction_input(SABRESD_EPDC_BDR0);
-	gpio_direction_input(SABRESD_EPDC_SDCE0);
-	gpio_direction_input(SABRESD_EPDC_SDCE1);
-	gpio_direction_input(SABRESD_EPDC_SDCE2);
-}
-
-static void epdc_disable_pins(void)
-{
-	/* Configure MUX settings for EPDC pins to
-	 * GPIO and drive to 0. */
-	mxc_iomux_v3_setup_multiple_pads(mx6dl_sabresd_epdc_disable_pads, \
-				ARRAY_SIZE(mx6dl_sabresd_epdc_disable_pads));
-
-	gpio_direction_output(SABRESD_EPDC_SDDO_0, 0);
-	gpio_direction_output(SABRESD_EPDC_SDDO_1, 0);
-	gpio_direction_output(SABRESD_EPDC_SDDO_2, 0);
-	gpio_direction_output(SABRESD_EPDC_SDDO_3, 0);
-	gpio_direction_output(SABRESD_EPDC_SDDO_4, 0);
-	gpio_direction_output(SABRESD_EPDC_SDDO_5, 0);
-	gpio_direction_output(SABRESD_EPDC_SDDO_6, 0);
-	gpio_direction_output(SABRESD_EPDC_SDDO_7, 0);
-	gpio_direction_output(SABRESD_EPDC_GDCLK, 0);
-	gpio_direction_output(SABRESD_EPDC_GDSP, 0);
-	gpio_direction_output(SABRESD_EPDC_GDOE, 0);
-	gpio_direction_output(SABRESD_EPDC_GDRL, 0);
-	gpio_direction_output(SABRESD_EPDC_SDCLK, 0);
-	gpio_direction_output(SABRESD_EPDC_SDOE, 0);
-	gpio_direction_output(SABRESD_EPDC_SDLE, 0);
-	gpio_direction_output(SABRESD_EPDC_SDSHR, 0);
-	gpio_direction_output(SABRESD_EPDC_BDR0, 0);
-	gpio_direction_output(SABRESD_EPDC_SDCE0, 0);
-	gpio_direction_output(SABRESD_EPDC_SDCE1, 0);
-	gpio_direction_output(SABRESD_EPDC_SDCE2, 0);
-}
-
-static struct fb_videomode e60_v110_mode = {
-	.name = "E60_V110",
-	.refresh = 50,
-	.xres = 800,
-	.yres = 600,
-	.pixclock = 18604700,
-	.left_margin = 8,
-	.right_margin = 178,
-	.upper_margin = 4,
-	.lower_margin = 10,
-	.hsync_len = 20,
-	.vsync_len = 4,
-	.sync = 0,
-	.vmode = FB_VMODE_NONINTERLACED,
-	.flag = 0,
-};
-static struct fb_videomode e60_v220_mode = {
-	.name = "E60_V220",
-	.refresh = 85,
-	.xres = 800,
-	.yres = 600,
-	.pixclock = 30000000,
-	.left_margin = 8,
-	.right_margin = 164,
-	.upper_margin = 4,
-	.lower_margin = 8,
-	.hsync_len = 4,
-	.vsync_len = 1,
-	.sync = 0,
-	.vmode = FB_VMODE_NONINTERLACED,
-	.flag = 0,
-	.refresh = 85,
-	.xres = 800,
-	.yres = 600,
-};
-static struct fb_videomode e060scm_mode = {
-	.name = "E060SCM",
-	.refresh = 85,
-	.xres = 800,
-	.yres = 600,
-	.pixclock = 26666667,
-	.left_margin = 8,
-	.right_margin = 100,
-	.upper_margin = 4,
-	.lower_margin = 8,
-	.hsync_len = 4,
-	.vsync_len = 1,
-	.sync = 0,
-	.vmode = FB_VMODE_NONINTERLACED,
-	.flag = 0,
-};
-static struct fb_videomode e97_v110_mode = {
-	.name = "E97_V110",
-	.refresh = 50,
-	.xres = 1200,
-	.yres = 825,
-	.pixclock = 32000000,
-	.left_margin = 12,
-	.right_margin = 128,
-	.upper_margin = 4,
-	.lower_margin = 10,
-	.hsync_len = 20,
-	.vsync_len = 4,
-	.sync = 0,
-	.vmode = FB_VMODE_NONINTERLACED,
-	.flag = 0,
-};
-
-static struct imx_epdc_fb_mode panel_modes[] = {
-	{
-		&e60_v110_mode,
-		4,      /* vscan_holdoff */
-		10,     /* sdoed_width */
-		20,     /* sdoed_delay */
-		10,     /* sdoez_width */
-		20,     /* sdoez_delay */
-		428,    /* gdclk_hp_offs */
-		20,     /* gdsp_offs */
-		0,      /* gdoe_offs */
-		1,      /* gdclk_offs */
-		1,      /* num_ce */
-	},
-	{
-		&e60_v220_mode,
-		4,      /* vscan_holdoff */
-		10,     /* sdoed_width */
-		20,     /* sdoed_delay */
-		10,     /* sdoez_width */
-		20,     /* sdoez_delay */
-		465,    /* gdclk_hp_offs */
-		20,     /* gdsp_offs */
-		0,      /* gdoe_offs */
-		9,      /* gdclk_offs */
-		1,      /* num_ce */
-	},
-	{
-		&e060scm_mode,
-		4,      /* vscan_holdoff */
-		10,     /* sdoed_width */
-		20,     /* sdoed_delay */
-		10,     /* sdoez_width */
-		20,     /* sdoez_delay */
-		419,    /* gdclk_hp_offs */
-		20,     /* gdsp_offs */
-		0,      /* gdoe_offs */
-		5,      /* gdclk_offs */
-		1,      /* num_ce */
-	},
-	{
-		&e97_v110_mode,
-		8,      /* vscan_holdoff */
-		10,     /* sdoed_width */
-		20,     /* sdoed_delay */
-		10,     /* sdoez_width */
-		20,     /* sdoez_delay */
-		632,    /* gdclk_hp_offs */
-		20,     /* gdsp_offs */
-		0,      /* gdoe_offs */
-		1,      /* gdclk_offs */
-		3,      /* num_ce */
-	}
-};
-
-static struct imx_epdc_fb_platform_data epdc_data = {
-	.epdc_mode = panel_modes,
-	.num_modes = ARRAY_SIZE(panel_modes),
-	.get_pins = epdc_get_pins,
-	.put_pins = epdc_put_pins,
-	.enable_pins = epdc_enable_pins,
-	.disable_pins = epdc_disable_pins,
 };
 
 static void imx6q_sabresd_usbotg_vbus(bool on)
 {
-	if (on)
+	if (!on)
 		gpio_set_value(SABRESD_USB_OTG_PWR, 1);
 	else
 		gpio_set_value(SABRESD_USB_OTG_PWR, 0);
@@ -1102,7 +268,7 @@ static void imx6q_sabresd_usbotg_vbus(bool on)
 
 static void imx6q_sabresd_host1_vbus(bool on)
 {
-	if (on)
+	if (!on)
 		gpio_set_value(SABRESD_USB_H1_PWR, 1);
 	else
 		gpio_set_value(SABRESD_USB_H1_PWR, 0);
@@ -1265,20 +431,6 @@ static struct ahci_platform_data mx6q_sabresd_sata_data = {
 };
 #endif
 
-static void mx6q_sabresd_flexcan0_switch(int enable)
-{
-	if (enable) {
-		gpio_set_value(SABRESD_CAN1_STBY, 1);
-	} else {
-		gpio_set_value(SABRESD_CAN1_STBY, 0);
-	}
-}
-
-static const struct flexcan_platform_data
-	mx6q_sabresd_flexcan0_pdata __initconst = {
-	.transceiver_switch = mx6q_sabresd_flexcan0_switch,
-};
-
 static struct viv_gpu_platform_data imx6q_gpu_pdata __initdata = {
 	.reserved_mem_size = SZ_128M,
 };
@@ -1288,56 +440,13 @@ static struct imx_asrc_platform_data imx_asrc_data = {
 	.clk_map_ver = 2,
 };
 
-static void mx6_reset_mipi_dsi(void)
-{
-	gpio_set_value(SABRESD_DISP_PWR_EN, 1);
-	gpio_set_value(SABRESD_DISP_RST_B, 1);
-	udelay(10);
-	gpio_set_value(SABRESD_DISP_RST_B, 0);
-	udelay(50);
-	gpio_set_value(SABRESD_DISP_RST_B, 1);
-
-	/*
-	 * it needs to delay 120ms minimum for reset complete
-	 */
-	msleep(120);
-}
-
-static struct mipi_dsi_platform_data mipi_dsi_pdata = {
-	.ipu_id		= 0,
-	.disp_id	= 1,
-	.lcd_panel	= "TRULY-WVGA",
-	.reset		= mx6_reset_mipi_dsi,
-};
-
 static struct ipuv3_fb_platform_data sabresd_fb_data[] = {
-	{ /*fb0*/
-	.disp_dev = "ldb",
-	.interface_pix_fmt = IPU_PIX_FMT_RGB666,
-	.mode_str = "LDB-XGA",
-	.default_bpp = 16,
-	.int_clk = false,
-	.late_init = false,
-	}, {
-	.disp_dev = "ldb",
-	.interface_pix_fmt = IPU_PIX_FMT_RGB666,
-	.mode_str = "LDB-XGA",
-	.default_bpp = 16,
-	.int_clk = false,
-	}, {
-	.disp_dev = "lcd",
-	.interface_pix_fmt = IPU_PIX_FMT_RGB565,
-	.mode_str = "CLAA-WVGA",
-	.default_bpp = 16,
-	.int_clk = false,
-	.late_init = false,
-	}, {
-	.disp_dev = "ldb",
-	.interface_pix_fmt = IPU_PIX_FMT_RGB666,
-	.mode_str = "LDB-VGA",
-	.default_bpp = 16,
+	{/*fb0*/
+	.disp_dev = "hdmi",
+	.interface_pix_fmt = IPU_PIX_FMT_RGB24,
+	.mode_str = "1920x1080M@60",
+	.default_bpp = 32,
 	.int_clk = false,
-	.late_init = false,
 	},
 };
 
@@ -1403,12 +512,6 @@ static struct fsl_mxc_hdmi_core_platform_data hdmi_core_data = {
 	.disp_id = 0,
 };
 
-static struct fsl_mxc_lcd_platform_data lcdif_data = {
-	.ipu_id = 0,
-	.disp_id = 0,
-	.default_ifmt = IPU_PIX_FMT_RGB565,
-};
-
 static struct fsl_mxc_ldb_platform_data ldb_data = {
 	.ipu_id = 1,
 	.disp_id = 1,
@@ -1418,24 +521,6 @@ static struct fsl_mxc_ldb_platform_data ldb_data = {
 	.sec_disp_id = 0,
 };
 
-static struct max8903_pdata charger1_data = {
-	.dok = SABRESD_CHARGE_DOK_B,
-	.uok = SABRESD_CHARGE_UOK_B,
-	.chg = SABRESD_CHARGE_CHG_1_B,
-	.flt = SABRESD_CHARGE_FLT_1_B,
-	.dcm_always_high = true,
-	.dc_valid = true,
-	.usb_valid = true,
-};
-
-static struct platform_device sabresd_max8903_charger_1 = {
-	.name	= "max8903-charger",
-	.id	= 1,
-	.dev	= {
-		.platform_data = &charger1_data,
-	},
-};
-
 static struct imx_ipuv3_platform_data ipu_data[] = {
 	{
 	.rev = 4,
@@ -1448,21 +533,6 @@ static struct imx_ipuv3_platform_data ipu_data[] = {
 	},
 };
 
-static struct fsl_mxc_capture_platform_data capture_data[] = {
-	{
-		.csi = 0,
-		.ipu = 0,
-		.mclk_source = 0,
-		.is_mipi = 0,
-	}, {
-		.csi = 1,
-		.ipu = 0,
-		.mclk_source = 0,
-		.is_mipi = 1,
-	},
-};
-
-
 struct imx_vout_mem {
 	resource_size_t res_mbase;
 	resource_size_t res_msize;
@@ -1476,14 +546,14 @@ static void sabresd_suspend_enter(void)
 {
 	/* suspend preparation */
 	/* Disable AUX 5V */
-	gpio_set_value(SABRESD_AUX_5V_EN, 0);
+	// nothing for Curie
 }
 
 static void sabresd_suspend_exit(void)
 {
 	/* resume restore */
 	/* Enable AUX 5V */
-	gpio_set_value(SABRESD_AUX_5V_EN, 1);
+	// nothing for Curie
 }
 static const struct pm_platform_data mx6q_sabresd_pm_data __initconst = {
 	.name = "imx_pm",
@@ -1517,65 +587,29 @@ static struct platform_device sabresd_vmmc_reg_devices = {
 	},
 };
 
-static int __init imx6q_init_audio(void)
-{
-	if (board_is_mx6_reva()) {
-		mxc_register_device(&mx6_sabresd_audio_wm8958_device,
-				    &wm8958_data);
-		imx6q_add_imx_ssi(1, &mx6_sabresd_ssi_pdata);
-
-		mxc_wm8958_init();
-	} else {
-		platform_device_register(&sabresd_vwm8962_reg_devices);
-		mxc_register_device(&mx6_sabresd_audio_wm8962_device,
-				    &wm8962_data);
-		imx6q_add_imx_ssi(1, &mx6_sabresd_ssi_pdata);
-
-		mxc_wm8962_init();
-	}
-
-	return 0;
-}
-
-#ifndef CONFIG_IMX_PCIE
-static void pcie_3v3_power(void)
-{
-	/* disable PCIE_3V3 first */
-	gpio_request(SABRESD_PCIE_PWR_EN, "pcie_3v3_en");
-	gpio_direction_output(SABRESD_PCIE_PWR_EN, 0);
-	mdelay(10);
-	/* enable PCIE_3V3 again */
-	gpio_set_value(SABRESD_PCIE_PWR_EN, 1);
-	gpio_free(SABRESD_PCIE_PWR_EN);
-}
-
-static void pcie_3v3_reset(void)
-{
-	/* reset miniPCIe */
-	gpio_request(SABRESD_PCIE_RST_B_REVB, "pcie_reset_rebB");
-	gpio_direction_output(SABRESD_PCIE_RST_B_REVB, 0);
-	/* The PCI Express Mini CEM specification states that PREST# is
-	deasserted minimum 1ms after 3.3vVaux has been applied and stable*/
-	mdelay(1);
-	gpio_set_value(SABRESD_PCIE_RST_B_REVB, 1);
-	gpio_free(SABRESD_PCIE_RST_B_REVB);
-}
-#endif
-
-static void gps_power_on(bool on)
-{
-	/* Enable/disable aux_3v15 */
-	gpio_request(SABRESD_AUX_3V15_EN, "aux_3v15_en");
-	gpio_direction_output(SABRESD_AUX_3V15_EN, 1);
-	gpio_set_value(SABRESD_AUX_3V15_EN, on);
-	gpio_free(SABRESD_AUX_3V15_EN);
-	/*Enable/disable gps_en*/
-	gpio_request(SABRESD_GPS_EN, "gps_en");
-	gpio_direction_output(SABRESD_GPS_EN, 1);
-	gpio_set_value(SABRESD_GPS_EN, on);
-	gpio_free(SABRESD_GPS_EN);
-
-}
+static struct mxc_dvfs_platform_data sabresd_dvfscore_data = {
+	.reg_id = "VDDCORE",
+	.soc_id	= "VDDSOC",
+	.clk1_id = "cpu_clk",
+	.clk2_id = "gpc_dvfs_clk",
+	.gpc_cntr_offset = MXC_GPC_CNTR_OFFSET,
+	.ccm_cdcr_offset = MXC_CCM_CDCR_OFFSET,
+	.ccm_cacrr_offset = MXC_CCM_CACRR_OFFSET,
+	.ccm_cdhipr_offset = MXC_CCM_CDHIPR_OFFSET,
+	.prediv_mask = 0x1F800,
+	.prediv_offset = 11,
+	.prediv_val = 3,
+	.div3ck_mask = 0xE0000000,
+	.div3ck_offset = 29,
+	.div3ck_val = 2,
+	.emac_val = 0x08,
+	.upthr_val = 25,
+	.dnthr_val = 9,
+	.pncthr_val = 33,
+	.upcnt_val = 10,
+	.dncnt_val = 10,
+	.delay_time = 80,
+};
 
 #if defined(CONFIG_LEDS_TRIGGER) || defined(CONFIG_LEDS_GPIO)
 
@@ -1586,22 +620,17 @@ static void gps_power_on(bool on)
 	.active_low		= act_low,				\
 	.retain_state_suspended = state_suspend,			\
 	.default_state		= 0,					\
-	.default_trigger	= "max8903-"trigger,		\
+	.default_trigger	= trigger,		\
 }
 
-/* use to show a external power source is connected
- * GPIO_LED(SABRESD_CHARGE_DONE, "chg_detect", 0, 1, "ac-online"),
- */
+// for Curie revA, error & user leds are active high
+// for Curie revB, the leds are active low
 static struct gpio_led imx6q_gpio_leds[] = {
-	GPIO_LED(SABRESD_CHARGE_NOW, "chg_now_led", 0, 1,
-		"charger-charging"),
-/* For the latest B4 board, this GPIO_1 is connected to POR_B,
-which will reset the whole board if this pin's level is changed,
-so, for the latest board, we have to avoid using this pin as
-GPIO.
-	GPIO_LED(SABRESD_CHARGE_DONE, "chg_done_led", 0, 1,
-			"charger-full"),
-*/
+	GPIO_LED(SABRESD_LED_BOOT, "boot", 1, 1, "heartbeat"),
+	GPIO_LED(SABRESD_LED_ERROR, "error", 1, 1, "error"),
+	GPIO_LED(SABRESD_LED_USER1, "user1", 1, 1, "user1"),
+	GPIO_LED(SABRESD_LED_USER2, "user2", 1, 1, "user2"),
+	GPIO_LED(SABRESD_LED_WIFI, "wifi", 1, 1, "wifi"),
 };
 
 static struct gpio_led_platform_data imx6q_gpio_leds_data = {
@@ -1638,85 +667,65 @@ static void __init imx6q_add_device_gpio_leds(void) {}
 	.debounce_interval = debounce,				\
 }
 
-static struct gpio_keys_button imx6q_buttons[] = {
-	GPIO_BUTTON(SABRESD_VOLUME_UP, KEY_VOLUMEUP, 1, "volume-up", 0, 1),
-	GPIO_BUTTON(SABRESD_VOLUME_DN, KEY_VOLUMEDOWN, 1, "volume-down", 0, 1),
-	GPIO_BUTTON(SABRESD_POWER_OFF, KEY_POWER, 1, "power", 1, 1),
+static struct gpio_keys_button sabresd_buttons[] = {
+	GPIO_BUTTON(SABRESD_KEY_USER, KEY_ENTER, 1, "enter", 1, 1),
 };
 
-static struct gpio_keys_platform_data imx6q_button_data = {
-	.buttons	= imx6q_buttons,
-	.nbuttons	= ARRAY_SIZE(imx6q_buttons),
+static struct gpio_keys_platform_data sabresd_button_data = {
+	.buttons	= sabresd_buttons,
+	.nbuttons	= ARRAY_SIZE(sabresd_buttons),
 };
 
-static struct platform_device imx6q_button_device = {
+static struct platform_device sabresd_button_device = {
 	.name		= "gpio-keys",
 	.id		= -1,
 	.num_resources  = 0,
 	.dev		= {
-		.platform_data = &imx6q_button_data,
+		.platform_data = &sabresd_button_data,
 	}
 };
 
 static void __init imx6q_add_device_buttons(void)
 {
-	platform_device_register(&imx6q_button_device);
+	platform_device_register(&sabresd_button_device);
 }
 #else
 static void __init imx6q_add_device_buttons(void) {}
 #endif
 
-static struct platform_pwm_backlight_data mx6_sabresd_pwm_backlight_data = {
-	.pwm_id = 0,
-	.max_brightness = 248,
-	.dft_brightness = 128,
-	.pwm_period_ns = 50000,
-};
-
-static struct mxc_dvfs_platform_data sabresd_dvfscore_data = {
-	.reg_id = "VDDCORE",
-	.soc_id	= "VDDSOC",
-	.clk1_id = "cpu_clk",
-	.clk2_id = "gpc_dvfs_clk",
-	.gpc_cntr_offset = MXC_GPC_CNTR_OFFSET,
-	.ccm_cdcr_offset = MXC_CCM_CDCR_OFFSET,
-	.ccm_cacrr_offset = MXC_CCM_CACRR_OFFSET,
-	.ccm_cdhipr_offset = MXC_CCM_CDHIPR_OFFSET,
-	.prediv_mask = 0x1F800,
-	.prediv_offset = 11,
-	.prediv_val = 3,
-	.div3ck_mask = 0xE0000000,
-	.div3ck_offset = 29,
-	.div3ck_val = 2,
-	.emac_val = 0x08,
-	.upthr_val = 25,
-	.dnthr_val = 9,
-	.pncthr_val = 33,
-	.upcnt_val = 10,
-	.dncnt_val = 10,
-	.delay_time = 80,
-};
-
-static void __init fixup_mxc_board(struct machine_desc *desc, struct tag *tags,
-				   char **cmdline, struct meminfo *mi)
+static void __init imx6q_sabresd_init_wifi(void)
 {
+	gpio_request(SABRESD_WIFI_CS, "wifi-cs");
+	gpio_direction_output(SABRESD_WIFI_CS, 1);
+	gpio_direction_output(SABRESD_WIFI_CS, 0);
 }
 
-static struct mipi_csi2_platform_data mipi_csi2_pdata = {
-	.ipu_id	 = 0,
-	.csi_id = 1,
-	.v_channel = 0,
-	.lanes = 2,
-	.dphy_clk = "mipi_pllref_clk",
-	.pixel_clk = "emi_clk",
-};
 
-static int __init caam_setup(char *__unused)
+static void __init fixup_mxc_board(struct machine_desc *desc, struct tag *tags,
+				   char **cmdline, struct meminfo *mi)
 {
-	caam_enabled = 1;
-	return 1;
+	char *str;
+	struct tag *t;
+	int i = 0;
+	struct ipuv3_fb_platform_data *pdata_fb = sabresd_fb_data;
+
+	for_each_tag(t, tags) {
+		if (t->hdr.tag == ATAG_CMDLINE) {
+			str = t->u.cmdline.cmdline;
+			str = strstr(str, "fbmem=");
+			if (str != NULL) {
+				str += 6;
+				pdata_fb[i++].res_size[0] = memparse(str, &str);
+				while (*str == ',' &&
+					i < ARRAY_SIZE(sabresd_fb_data)) {
+					str++;
+					pdata_fb[i++].res_size[0] = memparse(str, &str);
+				}
+			}
+			break;
+		}
+	}
 }
-early_param("caam", caam_setup);
 
 #define SNVS_LPCR 0x38
 static void mx6_snvs_poweroff(void)
@@ -1726,21 +735,10 @@ static void mx6_snvs_poweroff(void)
 	u32 value;
 	value = readl(mx6_snvs_base + SNVS_LPCR);
 	/*set TOP and DP_EN bit*/
-	writel(value | 0x60, mx6_snvs_base + SNVS_LPCR);
+	// do not send power off signal to PMIC, otherwise, an ONOFF key is required to power on the system
+	//writel(value | 0x60, mx6_snvs_base + SNVS_LPCR);
 }
 
-static const struct imx_pcie_platform_data mx6_sabresd_pcie_data __initconst = {
-	.pcie_pwr_en	= SABRESD_PCIE_PWR_EN,
-	.pcie_rst	= SABRESD_PCIE_RST_B_REVB,
-	.pcie_wake_up	= SABRESD_PCIE_WAKE_B,
-	.pcie_dis	= SABRESD_PCIE_DIS_B,
-#ifdef CONFIG_IMX_PCIE_EP_MODE_IN_EP_RC_SYS
-	.type_ep	= 1,
-#else
-	.type_ep	= 0,
-#endif
-};
-
 /*!
  * Board specific initialization.
  */
@@ -1781,6 +779,12 @@ static void __init mx6_sabresd_board_init(void)
 	}
 
 
+	// spdif
+	if (cpu_is_mx6q())
+		mxc_iomux_v3_setup_multiple_pads(mx6q_sabresd_spdif_pads, ARRAY_SIZE(mx6q_sabresd_spdif_pads));
+	else if (cpu_is_mx6dl())
+		mxc_iomux_v3_setup_multiple_pads(mx6dl_sabresd_spdif_pads, ARRAY_SIZE(mx6dl_sabresd_spdif_pads));
+
 #ifdef CONFIG_FEC_1588
 	/* Set GPIO_16 input for IEEE-1588 ts_clk and RMII reference clock
 	 * For MX6 GPR1 bit21 meaning:
@@ -1812,10 +816,12 @@ static void __init mx6_sabresd_board_init(void)
 		imx6q_add_ipuv3(1, &ipu_data[1]);
 		for (i = 0; i < 4 && i < ARRAY_SIZE(sabresd_fb_data); i++)
 			imx6q_add_ipuv3fb(i, &sabresd_fb_data[i]);
-	} else
+	} else {
 		for (i = 0; i < 2 && i < ARRAY_SIZE(sabresd_fb_data); i++)
 			imx6q_add_ipuv3fb(i, &sabresd_fb_data[i]);
+	}
 
+#if 0
 	imx6q_add_vdoa();
 	imx6q_add_mipi_dsi(&mipi_dsi_pdata);
 	imx6q_add_lcdif(&lcdif_data);
@@ -1833,8 +839,11 @@ static void __init mx6_sabresd_board_init(void)
 	imx6q_add_v4l2_capture(0, &capture_data[0]);
 	imx6q_add_v4l2_capture(1, &capture_data[1]);
 	imx6q_add_mipi_csi2(&mipi_csi2_pdata);
+#endif
+
 	imx6q_add_imx_snvs_rtc();
 
+#if 0
 	if (1 == caam_enabled)
 		imx6q_add_imx_caam();
 
@@ -1845,19 +854,16 @@ static void __init mx6_sabresd_board_init(void)
 		strcpy(mxc_i2c0_board_info[0].type, "wm8962");
 		mxc_i2c0_board_info[0].platform_data = &wm8962_config_data;
 	}
+#endif
+	imx6q_sabresd_init_wifi();
 	imx6q_add_device_gpio_leds();
 
-	imx6q_add_imx_i2c(0, &mx6q_sabresd_i2c_data);
 	imx6q_add_imx_i2c(1, &mx6q_sabresd_i2c_data);
 	imx6q_add_imx_i2c(2, &mx6q_sabresd_i2c_data);
 	if (cpu_is_mx6dl())
 		imx6q_add_imx_i2c(3, &mx6q_sabresd_i2c_data);
-	i2c_register_board_info(0, mxc_i2c0_board_info,
-			ARRAY_SIZE(mxc_i2c0_board_info));
 	i2c_register_board_info(1, mxc_i2c1_board_info,
 			ARRAY_SIZE(mxc_i2c1_board_info));
-	i2c_register_board_info(2, mxc_i2c2_board_info,
-			ARRAY_SIZE(mxc_i2c2_board_info));
 	ret = gpio_request(SABRESD_PFUZE_INT, "pFUZE-int");
 	if (ret) {
 		printk(KERN_ERR"request pFUZE-int error!!\n");
@@ -1866,14 +872,21 @@ static void __init mx6_sabresd_board_init(void)
 		gpio_direction_input(SABRESD_PFUZE_INT);
 		mx6q_sabresd_init_pfuze100(SABRESD_PFUZE_INT);
 	}
+#if 0
 	/* SPI */
 	imx6q_add_ecspi(0, &mx6q_sabresd_spi_data);
 	spi_device_init();
-
+#endif
 	imx6q_add_mxc_hdmi(&hdmi_data);
 
 	imx6q_add_anatop_thermal_imx(1, &mx6q_sabresd_anatop_thermal_data);
 
+	gpio_request(SABRESD_RGMII_RST, "rgmii_reset");
+	gpio_direction_output(SABRESD_RGMII_RST, 0);
+	mdelay(15);
+	gpio_direction_output(SABRESD_RGMII_RST, 1);
+	mdelay(200);
+
 	if (enet_to_gpio_6)
 		/* Make sure the IOMUX_OBSRV_MUX1 is set to ENET_IRQ. */
 		mxc_iomux_set_specialbits_register(
@@ -1904,67 +917,41 @@ static void __init mx6_sabresd_board_init(void)
 #endif
 	}
 	imx6q_add_vpu();
-	imx6q_init_audio();
 	platform_device_register(&sabresd_vmmc_reg_devices);
+#if 0
+	imx6q_init_audio();
 	imx_asrc_data.asrc_core_clk = clk_get(NULL, "asrc_clk");
 	imx_asrc_data.asrc_audio_clk = clk_get(NULL, "asrc_serial_clk");
 	imx6q_add_asrc(&imx_asrc_data);
-
-	/*
-	 * Disable HannStar touch panel CABC function,
-	 * this function turns the panel's backlight automatically
-	 * according to the content shown on the panel which
-	 * may cause annoying unstable backlight issue.
-	 */
-	gpio_request(SABRESD_CABC_EN0, "cabc-en0");
-	gpio_direction_output(SABRESD_CABC_EN0, 0);
-	gpio_request(SABRESD_CABC_EN1, "cabc-en1");
-	gpio_direction_output(SABRESD_CABC_EN1, 0);
-
-	imx6q_add_mxc_pwm(0);
-	imx6q_add_mxc_pwm(1);
-	imx6q_add_mxc_pwm(2);
-	imx6q_add_mxc_pwm(3);
-	imx6q_add_mxc_pwm_backlight(0, &mx6_sabresd_pwm_backlight_data);
+#endif
 
 	imx6q_add_otp();
 	imx6q_add_viim();
 	imx6q_add_imx2_wdt(0, NULL);
 	imx6q_add_dma();
 
-	imx6q_add_dvfs_core(&sabresd_dvfscore_data);
+	//imx6q_add_dvfs_core(&sabresd_dvfscore_data);
 	imx6q_add_device_buttons();
 
-	/* enable sensor 3v3 and 1v8 */
-	gpio_request(SABRESD_SENSOR_EN, "sensor-en");
-	gpio_direction_output(SABRESD_SENSOR_EN, 1);
-
-	/* enable ecompass intr */
-	gpio_request(SABRESD_eCOMPASS_INT, "ecompass-int");
-	gpio_direction_input(SABRESD_eCOMPASS_INT);
-	/* enable light sensor intr */
-	gpio_request(SABRESD_ALS_INT, "als-int");
-	gpio_direction_input(SABRESD_ALS_INT);
+	mxc_spdif_data.spdif_core_clk = clk_get_sys("mxc_spdif.0", NULL);
+	clk_put(mxc_spdif_data.spdif_core_clk);
+	imx6q_add_spdif(&mxc_spdif_data);
+	imx6q_add_spdif_dai();
+	imx6q_add_spdif_audio_device();
 
 	imx6q_add_hdmi_soc();
 	imx6q_add_hdmi_soc_dai();
 
 	if (cpu_is_mx6dl()) {
-		imx6dl_add_imx_pxp();
-		imx6dl_add_imx_pxp_client();
+		//imx6dl_add_imx_pxp();
+		//imx6dl_add_imx_pxp_client();
+#if 0
 		if (epdc_enabled) {
 			mxc_register_device(&max17135_sensor_device, NULL);
 			imx6dl_add_imx_epdc(&epdc_data);
 		}
+#endif
 	}
-	/*
-	ret = gpio_request_array(mx6q_sabresd_flexcan_gpios,
-			ARRAY_SIZE(mx6q_sabresd_flexcan_gpios));
-	if (ret)
-		pr_err("failed to request flexcan1-gpios: %d\n", ret);
-	else
-		imx6q_add_flexcan0(&mx6q_sabresd_flexcan0_pdata);
-	*/
 
 	clko2 = clk_get(NULL, "clko2_clk");
 	if (IS_ERR(clko2))
@@ -1984,50 +971,24 @@ static void __init mx6_sabresd_board_init(void)
 	if (!IS_ERR(clko))
 		clk_set_parent(clko, clko2);
 
-	/* Enable Aux_5V */
-	gpio_request(SABRESD_AUX_5V_EN, "aux_5v_en");
-	gpio_direction_output(SABRESD_AUX_5V_EN, 1);
-	gpio_set_value(SABRESD_AUX_5V_EN, 1);
-
+#if 0
 #ifndef CONFIG_IMX_PCIE
 	/* enable pcie 3v3 power without pcie driver */
 	pcie_3v3_power();
 	mdelay(10);
 	pcie_3v3_reset();
 #endif
+#endif
 
-	gps_power_on(true);
-	/* Register charger chips */
-	platform_device_register(&sabresd_max8903_charger_1);
 	pm_power_off = mx6_snvs_poweroff;
-	imx6q_add_busfreq();
+	//imx6q_add_busfreq();
 
 	/* Add PCIe RC interface support */
-	imx6q_add_pcie(&mx6_sabresd_pcie_data);
-	if (cpu_is_mx6dl()) {
-		mxc_iomux_v3_setup_multiple_pads(mx6dl_arm2_elan_pads,
-						ARRAY_SIZE(mx6dl_arm2_elan_pads));
-
-		/* ELAN Touchscreen */
-		gpio_request(SABRESD_ELAN_INT, "elan-interrupt");
-		gpio_direction_input(SABRESD_ELAN_INT);
-
-		gpio_request(SABRESD_ELAN_CE, "elan-cs");
-		gpio_direction_output(SABRESD_ELAN_CE, 1);
-		gpio_direction_output(SABRESD_ELAN_CE, 0);
-
-		gpio_request(SABRESD_ELAN_RST, "elan-rst");
-		gpio_direction_output(SABRESD_ELAN_RST, 1);
-		gpio_direction_output(SABRESD_ELAN_RST, 0);
-		mdelay(1);
-		gpio_direction_output(SABRESD_ELAN_RST, 1);
-		gpio_direction_output(SABRESD_ELAN_CE, 1);
-	}
 
 	imx6_add_armpmu();
-	imx6q_add_perfmon(0);
-	imx6q_add_perfmon(1);
-	imx6q_add_perfmon(2);
+	//imx6q_add_perfmon(0);
+	//imx6q_add_perfmon(1);
+	//imx6q_add_perfmon(2);
 }
 
 extern void __iomem *twd_base;
@@ -2061,6 +1022,19 @@ static void __init mx6q_sabresd_reserve(void)
 	}
 #endif
 
+	// Curie: HDMI reserve
+	{
+	int i;
+	for (i = 0; i < ARRAY_SIZE(sabresd_fb_data); i++)
+		if (sabresd_fb_data[i].res_size[0]) {
+			/* reserve for background buffer */
+			phys = memblock_alloc(sabresd_fb_data[i].res_size[0],
+						SZ_4K);
+			memblock_remove(phys, sabresd_fb_data[i].res_size[0]);
+			sabresd_fb_data[i].res_base[0] = phys;
+		}
+	}
+
 	if (vout_mem.res_msize) {
 		phys = memblock_alloc_base(vout_mem.res_msize,
 					   SZ_4K, SZ_1G);
diff --git a/arch/arm/mach-mx6/board-mx6q_sabresd.h b/arch/arm/mach-mx6/board-mx6q_sabresd.h
index adb2e3e..e3b2dab 100644
--- a/arch/arm/mach-mx6/board-mx6q_sabresd.h
+++ b/arch/arm/mach-mx6/board-mx6q_sabresd.h
@@ -21,28 +21,6 @@
 #include <mach/iomux-mx6q.h>
 
 static iomux_v3_cfg_t mx6q_sabresd_pads[] = {
-	/* AUDMUX */
-	MX6Q_PAD_CSI0_DAT4__AUDMUX_AUD3_TXC,
-	MX6Q_PAD_CSI0_DAT5__AUDMUX_AUD3_TXD,
-	MX6Q_PAD_CSI0_DAT6__AUDMUX_AUD3_TXFS,
-	MX6Q_PAD_CSI0_DAT7__AUDMUX_AUD3_RXD,
-
-	/* CAN1  */
-	MX6Q_PAD_KEY_ROW2__HDMI_TX_CEC_LINE,
-	/* MX6Q_PAD_KEY_COL2__CAN1_TXCAN, */
-	MX6Q_PAD_GPIO_1__WDOG2_WDOG_B,		/*WDOG_B to reset pmic*/
-	MX6Q_PAD_GPIO_2__GPIO_1_2,		/* user defined red led */
-	MX6Q_PAD_GPIO_7__GPIO_1_7,		/* NERR */
-
-	/* CCM  */
-	MX6Q_PAD_GPIO_0__CCM_CLKO,		/* SGTL500 sys_mclk */
-	MX6Q_PAD_GPIO_3__CCM_CLKO2,		/* J5 - Camera MCLK */
-
-	/* ECSPI1 */
-	MX6Q_PAD_KEY_COL0__ECSPI1_SCLK,
-	MX6Q_PAD_KEY_ROW0__ECSPI1_MOSI,
-	MX6Q_PAD_KEY_COL1__ECSPI1_MISO,
-	MX6Q_PAD_KEY_ROW1__GPIO_4_9,
 	/* ENET */
 	MX6Q_PAD_ENET_MDIO__ENET_MDIO,
 	MX6Q_PAD_ENET_MDC__ENET_MDC,
@@ -59,137 +37,31 @@ static iomux_v3_cfg_t mx6q_sabresd_pads[] = {
 	MX6Q_PAD_RGMII_RD2__ENET_RGMII_RD2,
 	MX6Q_PAD_RGMII_RD3__ENET_RGMII_RD3,
 	MX6Q_PAD_RGMII_RX_CTL__ENET_RGMII_RX_CTL,
-	MX6Q_PAD_ENET_TX_EN__GPIO_1_28,		/* Micrel RGMII Phy Interrupt */
-	MX6Q_PAD_EIM_D23__GPIO_3_23,		/* RGMII reset */
-	MX6Q_PAD_GPIO_16__ENET_ANATOP_ETHERNET_REF_OUT, /* Internal connect for 1588 TS Clock */
-
-	/* GPIO1 */
-	MX6Q_PAD_ENET_RX_ER__GPIO_1_24,		/* J9 - Microphone Detect */
-
-	/* GPIO2 */
-	/* MX6Q_PAD_NANDF_D1__GPIO_2_1,*/	/* J14 - Menu Button */
-	/* MX6Q_PAD_NANDF_D2__GPIO_2_2,*/	/* J14 - Back Button */
-	/* MX6Q_PAD_NANDF_D3__GPIO_2_3,*/	/* J14 - Search Button */
-	/* MX6Q_PAD_NANDF_D4__GPIO_2_4,*/	/* J14 - Home Button */
-	MX6Q_PAD_EIM_A22__GPIO_2_16,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_A21__GPIO_2_17,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_A20__GPIO_2_18,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_A19__GPIO_2_19,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_A18__GPIO_2_20,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_A17__GPIO_2_21,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_A16__GPIO_2_22,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_RW__GPIO_2_26,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_LBA__GPIO_2_27,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_EB0__GPIO_2_28,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_EB1__GPIO_2_29,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_EB3__GPIO_2_31,	/* J12 - Boot Mode Select */
-
-	/* GPIO3 */
-	MX6Q_PAD_EIM_DA0__GPIO_3_0,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA1__GPIO_3_1,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA2__GPIO_3_2,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA3__GPIO_3_3,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA4__GPIO_3_4,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA5__GPIO_3_5,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA6__GPIO_3_6,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA7__GPIO_3_7,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA8__GPIO_3_8,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA9__GPIO_3_9,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA10__GPIO_3_10,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA11__GPIO_3_11,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA12__GPIO_3_12,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA13__GPIO_3_13,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA14__GPIO_3_14,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_DA15__GPIO_3_15,	/* J12 - Boot Mode Select */
-
-	/* SW4 , SW5 & SW1 */
-	MX6Q_PAD_GPIO_4__GPIO_1_4,	/* Volume Up */
-	MX6Q_PAD_GPIO_5__GPIO_1_5,	/* Volume Down */
-	MX6Q_PAD_EIM_D29__GPIO_3_29,	/* power off */
-
-	/* CAP_TCH_INT1 */
-	MX6Q_PAD_NANDF_CLE__GPIO_6_7,
-
-	/* CAP_TCH_INT0 */
-	MX6Q_PAD_NANDF_ALE__GPIO_6_8,
-
-	/* eCompass int */
-	MX6Q_PAD_EIM_D16__GPIO_3_16,
-
-	/* GPIO5 */
-	MX6Q_PAD_EIM_WAIT__GPIO_5_0,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_EIM_A24__GPIO_5_4,	/* J12 - Boot Mode Select */
-
-	/* GPIO6 */
-	MX6Q_PAD_EIM_A23__GPIO_6_6,	/* J12 - Boot Mode Select */
-	MX6Q_PAD_NANDF_RB0__GPIO_6_10, /* AUX_5V Enable */
-
-	/* I2C1, WM8958 */
-	MX6Q_PAD_CSI0_DAT8__I2C1_SDA,
-	MX6Q_PAD_CSI0_DAT9__I2C1_SCL,
-
-	/* I2C2, Camera, MIPI */
-	MX6Q_PAD_KEY_COL3__I2C2_SCL,
-	MX6Q_PAD_KEY_ROW3__I2C2_SDA,
-
-	/*I2C3 */
-	MX6Q_PAD_GPIO_3__I2C3_SCL,
+	/* RGMII_nRST */
+	MX6Q_PAD_ENET_CRS_DV__GPIO_1_25,
+	/* IEEE 1588 clock */
+	MX6Q_PAD_GPIO_16__ENET_ANATOP_ETHERNET_REF_OUT,
+	/* RGMII Interrupt */
+	MX6Q_PAD_ENET_RXD1__GPIO_1_26,
 
-	/* DISPLAY */
-	MX6Q_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK,
-	MX6Q_PAD_DI0_PIN15__IPU1_DI0_PIN15,		/* DE */
-	MX6Q_PAD_DI0_PIN2__IPU1_DI0_PIN2,		/* HSync */
-	MX6Q_PAD_DI0_PIN3__IPU1_DI0_PIN3,		/* VSync */
-	MX6Q_PAD_DI0_PIN4__IPU1_DI0_PIN4,		/* Contrast */
-	MX6Q_PAD_DISP0_DAT0__IPU1_DISP0_DAT_0,
-	MX6Q_PAD_DISP0_DAT1__IPU1_DISP0_DAT_1,
-	MX6Q_PAD_DISP0_DAT2__IPU1_DISP0_DAT_2,
-	MX6Q_PAD_DISP0_DAT3__IPU1_DISP0_DAT_3,
-	MX6Q_PAD_DISP0_DAT4__IPU1_DISP0_DAT_4,
-	MX6Q_PAD_DISP0_DAT5__IPU1_DISP0_DAT_5,
-	MX6Q_PAD_DISP0_DAT6__IPU1_DISP0_DAT_6,
-	MX6Q_PAD_DISP0_DAT7__IPU1_DISP0_DAT_7,
-	MX6Q_PAD_DISP0_DAT8__IPU1_DISP0_DAT_8,
-	MX6Q_PAD_DISP0_DAT9__IPU1_DISP0_DAT_9,
-	MX6Q_PAD_DISP0_DAT10__IPU1_DISP0_DAT_10,
-	MX6Q_PAD_DISP0_DAT11__IPU1_DISP0_DAT_11,
-	MX6Q_PAD_DISP0_DAT12__IPU1_DISP0_DAT_12,
-	MX6Q_PAD_DISP0_DAT13__IPU1_DISP0_DAT_13,
-	MX6Q_PAD_DISP0_DAT14__IPU1_DISP0_DAT_14,
-	MX6Q_PAD_DISP0_DAT15__IPU1_DISP0_DAT_15,
-	MX6Q_PAD_DISP0_DAT16__IPU1_DISP0_DAT_16,
-	MX6Q_PAD_DISP0_DAT17__IPU1_DISP0_DAT_17,
-	MX6Q_PAD_DISP0_DAT18__IPU1_DISP0_DAT_18,
-	MX6Q_PAD_DISP0_DAT19__IPU1_DISP0_DAT_19,
-	MX6Q_PAD_DISP0_DAT20__IPU1_DISP0_DAT_20,
-	MX6Q_PAD_DISP0_DAT21__IPU1_DISP0_DAT_21,
-	MX6Q_PAD_DISP0_DAT22__IPU1_DISP0_DAT_22,
-	MX6Q_PAD_DISP0_DAT23__IPU1_DISP0_DAT_23,
-	MX6Q_PAD_GPIO_7__GPIO_1_7,		/* J7 - Display Connector GP */
-	MX6Q_PAD_GPIO_9__GPIO_1_9,		/* J7 - Display Connector GP */
-	/* MX6Q_PAD_NANDF_D0__GPIO_2_0,*/	/* J6 - LVDS Display contrast */
+	/* I2C for HDMI */
+	MX6Q_PAD_EIM_D16__I2C2_SDA,
+	MX6Q_PAD_EIM_EB2__I2C2_SCL,
 
-	/* DISP_PWM */
-	MX6Q_PAD_SD1_DAT3__PWM1_PWMO,		/* GPIO1[21] */
+	/* I2C3 for PMIC */
+	MX6Q_PAD_EIM_D18__I2C3_SDA,
+	MX6Q_PAD_EIM_D17__I2C3_SCL,
 
 	/* UART1 for debug */
 	MX6Q_PAD_CSI0_DAT10__UART1_TXD,
 	MX6Q_PAD_CSI0_DAT11__UART1_RXD,
 
-	/* UART3 for gps */
-	MX6Q_PAD_EIM_D24__UART3_TXD,
-	MX6Q_PAD_EIM_D25__UART3_RXD,
-
 	/* USBOTG ID pin */
 	MX6Q_PAD_ENET_RX_ER__ANATOP_USBOTG_ID,
-
-	/* USB power pin */
-	MX6Q_PAD_EIM_D22__GPIO_3_22,
-	MX6Q_PAD_ENET_TXD1__GPIO_1_29,
-
-	/* USB OC pin */
-	MX6Q_PAD_EIM_D21__USBOH3_USBOTG_OC,
-	MX6Q_PAD_EIM_D30__USBOH3_USBH1_OC,
+	/* USB_OTG_OC */
+	MX6Q_PAD_KEY_COL4__USBOH3_USBOTG_OC,
+	/* USB_OTG_PWR_EN */
+	MX6Q_PAD_KEY_ROW4__GPIO_4_15,
 
 	/* USDHC2 */
 	MX6Q_PAD_SD2_CLK__USDHC2_CLK,
@@ -198,12 +70,12 @@ static iomux_v3_cfg_t mx6q_sabresd_pads[] = {
 	MX6Q_PAD_SD2_DAT1__USDHC2_DAT1,
 	MX6Q_PAD_SD2_DAT2__USDHC2_DAT2,
 	MX6Q_PAD_SD2_DAT3__USDHC2_DAT3,
-	MX6Q_PAD_NANDF_D4__USDHC2_DAT4,
-	MX6Q_PAD_NANDF_D5__USDHC2_DAT5,
-	MX6Q_PAD_NANDF_D6__USDHC2_DAT6,
-	MX6Q_PAD_NANDF_D7__USDHC2_DAT7,
-	MX6Q_PAD_NANDF_D2__GPIO_2_2,		/* SD2_CD */
-	MX6Q_PAD_NANDF_D3__GPIO_2_3,		/* SD2_WP */
+	//MX6Q_PAD_NANDF_D4__USDHC2_DAT4,
+	//MX6Q_PAD_NANDF_D5__USDHC2_DAT5,
+	//MX6Q_PAD_NANDF_D6__USDHC2_DAT6,
+	//MX6Q_PAD_NANDF_D7__USDHC2_DAT7,
+	/* Wi-Fi CS */
+	MX6Q_PAD_NANDF_D4__GPIO_2_4,
 
 	/* USDHC3 */
 	MX6Q_PAD_SD3_CLK__USDHC3_CLK_50MHZ,
@@ -216,8 +88,8 @@ static iomux_v3_cfg_t mx6q_sabresd_pads[] = {
 	MX6Q_PAD_SD3_DAT5__USDHC3_DAT5_50MHZ,
 	MX6Q_PAD_SD3_DAT6__USDHC3_DAT6_50MHZ,
 	MX6Q_PAD_SD3_DAT7__USDHC3_DAT7_50MHZ,
-	MX6Q_PAD_NANDF_D0__GPIO_2_0,		/* SD3_CD */
-	MX6Q_PAD_NANDF_D1__GPIO_2_1,		/* SD3_WP */
+	MX6Q_PAD_NANDF_ALE__GPIO_6_8,		/* SD3_CD */
+	MX6Q_PAD_NANDF_CS2__GPIO_6_15,		/* SD3_WP */
 
 	/* USDHC4 */
 	MX6Q_PAD_SD4_CLK__USDHC4_CLK_50MHZ,
@@ -231,65 +103,23 @@ static iomux_v3_cfg_t mx6q_sabresd_pads[] = {
 	MX6Q_PAD_SD4_DAT6__USDHC4_DAT6_50MHZ,
 	MX6Q_PAD_SD4_DAT7__USDHC4_DAT7_50MHZ,
 
-	/* Charge */
-	MX6Q_PAD_EIM_A25__GPIO_5_2,  /* FLT_1_B */
-	MX6Q_PAD_EIM_D23__GPIO_3_23, /* CHG_1_B */
-	MX6Q_PAD_EIM_DA13__GPIO_3_13, /* CHG_2_B  */
-	MX6Q_PAD_EIM_DA14__GPIO_3_14, /* FLT_2_B */
-
-	MX6Q_PAD_ENET_RXD0__GPIO_1_27, /* UOK_B */
-	MX6Q_PAD_EIM_CS1__GPIO_2_24,   /* DOK_B */
+	/* HDMI_CEC_IN*/
+	MX6Q_PAD_EIM_A25__HDMI_TX_CEC_LINE,
 
-	/* Audio Codec */
-	MX6Q_PAD_KEY_COL2__GPIO_4_10,		/* CODEC_PWR_EN */
-	MX6Q_PAD_SD3_RST__GPIO_7_8,			/* HEADPHONE_DET */
-	MX6Q_PAD_GPIO_9__GPIO_1_9,			/* MICROPHONE_DET */
+	/* PMIC_INT_B */
+	MX6Q_PAD_GPIO_18__GPIO_7_13,
 
-	/*GPS AUX_3V15_EN*/
-	MX6Q_PAD_NANDF_WP_B__GPIO_6_9,
+	/* USR_DEF_LED */
+	MX6Q_PAD_GPIO_17__GPIO_7_12,
+	MX6Q_PAD_GPIO_1__GPIO_1_1,
+	MX6Q_PAD_GPIO_2__GPIO_1_2,
+	MX6Q_PAD_GPIO_9__GPIO_1_9,
 
-	/* PCIE */
-	MX6Q_PAD_EIM_D19__GPIO_3_19, /* PCIE_PWR_EN */
+	/* USR_DEF_BUTTONs */
+	MX6Q_PAD_EIM_DA5__GPIO_3_5,
 
-	MX6Q_PAD_GPIO_17__GPIO_7_12, /* PCIE_RST */
-	MX6Q_PAD_KEY_COL4__GPIO_4_14, /* PCIE_DIS */
-
-	/* DISP_RST_B */
-	MX6Q_PAD_NANDF_CS0__GPIO_6_11,
-	/* DISP_PWR_EN */
-	MX6Q_PAD_NANDF_CS1__GPIO_6_14,
-	/* CABC_EN0 */
-	MX6Q_PAD_NANDF_CS2__GPIO_6_15,
-	/* CABC_EN1 */
-	MX6Q_PAD_NANDF_CS3__GPIO_6_16,
-};
-
-static iomux_v3_cfg_t mx6q_sabresd_csi0_sensor_pads[] = {
-	/* IPU1 Camera */
-	MX6Q_PAD_CSI0_DAT12__IPU1_CSI0_D_12,
-	MX6Q_PAD_CSI0_DAT13__IPU1_CSI0_D_13,
-	MX6Q_PAD_CSI0_DAT14__IPU1_CSI0_D_14,
-	MX6Q_PAD_CSI0_DAT15__IPU1_CSI0_D_15,
-	MX6Q_PAD_CSI0_DAT16__IPU1_CSI0_D_16,
-	MX6Q_PAD_CSI0_DAT17__IPU1_CSI0_D_17,
-	MX6Q_PAD_CSI0_DAT18__IPU1_CSI0_D_18,
-	MX6Q_PAD_CSI0_DAT19__IPU1_CSI0_D_19,
-	MX6Q_PAD_CSI0_DATA_EN__IPU1_CSI0_DATA_EN,
-	MX6Q_PAD_CSI0_MCLK__IPU1_CSI0_HSYNC,
-	MX6Q_PAD_CSI0_PIXCLK__IPU1_CSI0_PIXCLK,
-	MX6Q_PAD_CSI0_VSYNC__IPU1_CSI0_VSYNC,
-
-	MX6Q_PAD_GPIO_0__CCM_CLKO,		/* camera clk */
-
-	MX6Q_PAD_SD1_DAT0__GPIO_1_16,		/* camera PWDN */
-	MX6Q_PAD_SD1_DAT1__GPIO_1_17,		/* camera RESET */
-};
-
-static iomux_v3_cfg_t mx6q_sabresd_mipi_sensor_pads[] = {
-	MX6Q_PAD_GPIO_0__CCM_CLKO,		/* camera clk */
-
-	MX6Q_PAD_SD1_DAT2__GPIO_1_19,		/* camera PWDN */
-	MX6Q_PAD_SD1_CLK__GPIO_1_20,		/* camera RESET */
+	/* WiFi LED */
+	MX6Q_PAD_GPIO_6__GPIO_1_6,
 };
 
 static iomux_v3_cfg_t mx6q_sabresd_hdmi_ddc_pads[] = {
@@ -301,4 +131,9 @@ static iomux_v3_cfg_t mx6q_sabresd_i2c2_pads[] = {
 	MX6Q_PAD_KEY_COL3__I2C2_SCL,	/* I2C2 SCL */
 	MX6Q_PAD_KEY_ROW3__I2C2_SDA,	/* I2C2 SDA */
 };
+
+static iomux_v3_cfg_t mx6q_sabresd_spdif_pads[] = {
+	MX6Q_PAD_ENET_RXD0__SPDIF_OUT1, /* SPDIF OUT */
+};
+
 #endif
diff --git a/arch/arm/mach-mx6/mx6q_sabresd_pmic_pfuze100.c b/arch/arm/mach-mx6/mx6q_sabresd_pmic_pfuze100.c
index c18a014..a057035 100644
--- a/arch/arm/mach-mx6/mx6q_sabresd_pmic_pfuze100.c
+++ b/arch/arm/mach-mx6/mx6q_sabresd_pmic_pfuze100.c
@@ -485,6 +485,15 @@ static int pfuze100_init(struct mc_pfuze *pfuze)
 		if (ret)
 			goto err;
 	}
+
+
+	// disable boost 5V output
+	pfuze_reg_write(pfuze, 0x66, 0x00);
+	// coin charger, enable, 3.3V
+	//pfuze_reg_write(pfuze, 0x1A, 0x0F);
+	// disable coin charger
+	pfuze_reg_write(pfuze, 0x1A, 0x00);
+
 	return 0;
 err:
 	printk(KERN_ERR "pfuze100 init error!\n");
@@ -525,5 +534,5 @@ static struct i2c_board_info __initdata pfuze100_i2c_device = {
 int __init mx6q_sabresd_init_pfuze100(u32 int_gpio)
 {
 	pfuze100_i2c_device.irq = gpio_to_irq(int_gpio); /*update INT gpio */
-	return i2c_register_board_info(1, &pfuze100_i2c_device, 1);
+	return i2c_register_board_info(2, &pfuze100_i2c_device, 1);
 }
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index ff109fe..a5c0bce 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -1017,7 +1017,8 @@ static struct phy_driver genphy_driver = {
 	.phy_id_mask	= 0xffffffff,
 	.name		= "Generic PHY",
 	.config_init	= genphy_config_init,
-	.features	= 0,
+	.features	= PHY_GBIT_FEATURES,
+	//.features	= 0,
 	.config_aneg	= genphy_config_aneg,
 	.read_status	= genphy_read_status,
 	.suspend	= genphy_suspend,
diff --git a/drivers/net/phy/realtek.c b/drivers/net/phy/realtek.c
index a4eae75..8972c21 100644
--- a/drivers/net/phy/realtek.c
+++ b/drivers/net/phy/realtek.c
@@ -50,7 +50,7 @@ static int rtl821x_config_intr(struct phy_device *phydev)
 
 /* RTL8211B */
 static struct phy_driver rtl821x_driver = {
-	.phy_id		= 0x001cc912,
+	.phy_id		= 0x001cc915, // 0x001cc912: RTL8211B; 0x001cc915: RTL8211E
 	.name		= "RTL821x Gigabit Ethernet",
 	.phy_id_mask	= 0x001fffff,
 	.features	= PHY_GBIT_FEATURES,
diff --git a/firmware/Makefile b/firmware/Makefile
index b1d024d..c32e84c 100644
--- a/firmware/Makefile
+++ b/firmware/Makefile
@@ -148,10 +148,13 @@ fw-shipped-$(CONFIG_SOC_IMX53) += imx/sdma/sdma-imx53-to1.bin
 fw-shipped-$(CONFIG_SOC_IMX6Q) += imx/sdma/sdma-imx6q-to1.bin
 endif
 fw-shipped-$(CONFIG_FB_MXC_SIPIX_PANEL) += imx/spdc_pvi.fw
+# XXX should be 'ifdef CONFIG_IMX_CURIE'
+ifeq (1,0)
 fw-shipped-$(CONFIG_FB_MXC_EINK_PANEL) += imx/epdc_E60_V110.fw \
                 imx/epdc_E60_V220.fw \
                 imx/epdc_E97_V110.fw \
-                imx/epdc_E060SCM.fw \
+                imx/epdc_E060SCM.fw
+endif
 
 fw-shipped-all := $(fw-shipped-y) $(fw-shipped-m) $(fw-shipped-)
 
diff --git a/sound/soc/codecs/mxc_spdif.c b/sound/soc/codecs/mxc_spdif.c
index b358f71..ba04f69 100644
--- a/sound/soc/codecs/mxc_spdif.c
+++ b/sound/soc/codecs/mxc_spdif.c
@@ -577,6 +577,8 @@ static int mxc_spdif_playback_start(struct snd_pcm_substream *substream,
 	regval &= ~SCR_LOW_POWER;
 	regval |= SCR_TXFIFO_AUTOSYNC | SCR_TXFIFO_NORMAL |
 	    SCR_TXSEL_NORMAL | SCR_USRC_SEL_CHIP | (2 << SCR_TXFIFO_ESEL_BIT);
+	// to clear VAL
+	regval |= SCR_VAL_CLEAR;
 	__raw_writel(regval, SPDIF_REG_SCR + spdif_base_addr);
 
 	/* Default clock source from EXTAL, divider by 8, generate 44.1kHz
