#!/usr/bin/perl

use strict;
use warnings;

use Config::Any ();
use Data::Dumper qw(Dumper);
use File::Path qw(make_path remove_tree);
use File::Slurp::Tiny qw(write_file);
use File::Spec qw();
use Params::Util qw(_HASH);
use Unix::Statgrab ();
use Time::HiRes qw(usleep);

use FindBin;
my $f_cfg = Config::Any->load_files(
    {
        files   => [qw(/etc/sysdetails.json)],
        use_ext => 1
    }
);
my %cfg = map { %$_ } ( map { values %$_ } @$f_cfg );

foreach my $path ( @{ $cfg{paths} } )
{
    make_path($path);

    opendir(my $dh, $path);
    map { `tar czf $_.tar.gz $_`; remove_tree($_); } grep { -d } map { "$path/$_" } grep { /^\d+$/ } readdir($dh);
    rewinddir($dh);
    my @files = sort {(stat $b)[10] <=> (stat $a)[10]} grep { -f } map { "$path/$_" } grep { /^\d+\.tar\.gz$/ } readdir($dh);
    my $keep_ofs = $cfg{keep}>=0 ? $cfg{keep} : 0;
    unlink(@files[ $keep_ofs .. (scalar @files)-1 ]);
    closedir $dh;

    make_path(sprintf("%s/%d", $path, $$));
}

my $l = 1;
for ( my $n = 10; $n < $cfg{logdata}; $n *= 10 ) { ++$l }

my @funcs = ({get_cpu_stats => 'get_cpu_percents'}, 
  qw(get_host_info get_disk_io_stats get_fs_stats get_load_stats),
  qw(get_mem_stats get_swap_stats get_network_io_stats),
  qw(get_network_iface_stats get_page_stats get_process_stats),
  qw(get_user_stats));

my %funcs;

sub get_stat_func
{
    my $func = shift;
    $funcs{$func} and return $funcs{$func};
    my $pkg;
    @_ and $pkg = shift;
    $pkg and ref $pkg and $pkg = ref $pkg;
    $pkg or $pkg = "Unix::Statgrab";
    $funcs{$func} = $pkg->can($func);
    defined $funcs{$func} or die "No $func in $pkg";
    $funcs{$func}
}

sub is_sane
{
    my %data;
    foreach my $func ({get_cpu_stats => 'get_cpu_percents'}, qw(get_mem_stats get_process_stats))
    {
        my $stat = ref $func ? (keys %$func)[0] : $func;
	my $stats = get_stat_func($stat)->();
	ref $func and $stats = get_stat_func($stat = $func->{$stat}, ref $stats)->($stats);
        defined $data{$stat} or $data{$stat} = [ $stats->as_list ];
    }

    return unless $data{get_mem_stats}->[0]->{free} < (0.2 * $data{get_mem_stats}->[0]->{total}) or $data{get_cpu_percents}->[0]->{idle} < 5;

    my @procs = grep {$_->{proc_resident} > 50*1024*1024 or $_->{cpu_percent} > 10} @{$data{get_process_stats}};
    my @procs_by_mem = (sort { $b->{proc_resident} <=> $a->{proc_resident} } @procs)[0..19];
    my @procs_by_cpu = (sort { $b->{cpu_percent} <=> $a->{cpu_percent} } @procs)[0..19];
    my %procs = map { $_->{pid} => $_ } (grep { _HASH($_) } @procs_by_mem, @procs_by_cpu);
    $data{get_process_stats} = [ values %procs ];

    %data;
}

my $error = 0;
my $i = 0;
for ( ;; usleep( $cfg{usleep} ) )
{
    $error or write_file("/sys/class/leds/error/brightness", "0");
    $error = 0;
    my %data = is_sane;
    scalar %data or next;
    $error = 1;
    write_file("/sys/class/leds/error/trigger", "heartbeat");

    foreach my $func (@funcs)
    {
        my $stat = ref $func ? (keys %$func)[0] : $func;
	my $stats = get_stat_func($stat)->();
	ref $func and $stats = get_stat_func($stat = $func->{$stat}, ref $stats)->($stats);
        defined $data{$stat} or $data{$stat} = [ $stats->as_list ];
    }

    foreach my $path ( @{ $cfg{paths} } )
    {
        my $fn = File::Spec->catfile( $path, sprintf( "%d/sysdetails.%0${l}d", $$, $i ) );

        my $fh;
        open( $fh, ">", $fn ) or die "Can't open '$fn': $!";
        print $fh Dumper( \%data );
        close($fh);
    }

    ++$i;
    $i %= $cfg{logdata};
}
